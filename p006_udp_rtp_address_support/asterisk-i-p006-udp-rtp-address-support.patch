diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-11.3.0.p005/channels/chan_sip.c asterisk-11.3.0/channels/chan_sip.c
--- asterisk-11.3.0.p005/channels/chan_sip.c	2013-05-16 09:32:02.984445940 +0100
+++ asterisk-11.3.0/channels/chan_sip.c	2013-05-16 19:24:42.193993000 +0100
@@ -1241,15 +1241,19 @@
  */
 static int sipsock  = -1;
 
-struct ast_sockaddr bindaddr;	/*!< UDP: The address we bind to */
+struct ast_sockaddr udpbindaddr;       /*!< UDP: The address we bind to */
+
+struct ast_sockaddr rtpbindaddr; /*!< The address we bind to */
 
 /*! \brief our (internal) default address/port to put in SIP/SDP messages
- *  internip is initialized picking a suitable address from one of the
+ *  internsipip is initialized picking a suitable address from one of the
  * interfaces, and the same port number we bind to. It is used as the
  * default address/port in SIP messages, and as the default address
  * (but not port) in SDP messages.
  */
-static struct ast_sockaddr internip;
+static struct ast_sockaddr internsipip;
+
+static struct ast_sockaddr internrtpip;
 
 /*! \brief our external IP address/port for SIP sessions.
  * externaddr.sin_addr is only set when we know we might be behind
@@ -1555,6 +1559,7 @@
 
 /*--- Internal UA client handling (outbound registrations) */
 static void ast_sip_ouraddrfor(const struct ast_sockaddr *them, struct ast_sockaddr *us, struct sip_pvt *p);
+static void ast_rtp_ouraddrfor(const struct ast_sockaddr *them, struct ast_sockaddr *us, struct sip_pvt *p);
 static void sip_registry_destroy(struct sip_registry *reg);
 static int sip_register(const char *value, int lineno);
 static const char *regstate2str(enum sipregistrystate regstate) attribute_const;
@@ -2038,7 +2043,7 @@
 	sip_pvt_lock(monitor_instance->subscription_pvt);
 	ast_set_flag(&monitor_instance->subscription_pvt->flags[0], SIP_OUTGOING);
 	create_addr(monitor_instance->subscription_pvt, monitor_instance->peername, 0, 1);
-	ast_sip_ouraddrfor(&monitor_instance->subscription_pvt->sa, &monitor_instance->subscription_pvt->ourip, monitor_instance->subscription_pvt);
+	ast_sip_ouraddrfor(&monitor_instance->subscription_pvt->sa, &monitor_instance->subscription_pvt->oursipip, monitor_instance->subscription_pvt);
 	monitor_instance->subscription_pvt->subscribed = CALL_COMPLETION;
 	monitor_instance->subscription_pvt->expiry = when;
 
@@ -3918,7 +3923,7 @@
 	/* z9hG4bK is a magic cookie.  See RFC 3261 section 8.1.1.7 */
 	snprintf(p->via, sizeof(p->via), "SIP/2.0/%s %s;branch=z9hG4bK%08x%s",
 		 get_transport_pvt(p),
-		 ast_sockaddr_stringify_remote(&p->ourip),
+		 ast_sockaddr_stringify(&p->oursipip),
 		 (int) p->branch, rport);
 }
 
@@ -3926,7 +3931,7 @@
  *
  * Using the localaddr structure built up with localnet statements in sip.conf
  * apply it to their address to see if we need to substitute our
- * externaddr or can get away with our internal bindaddr
+ * externaddr or can get away with our internal udpbindaddr
  * 'us' is always overwritten.
  */
 static void ast_sip_ouraddrfor(const struct ast_sockaddr *them, struct ast_sockaddr *us, struct sip_pvt *p)
@@ -3947,13 +3952,13 @@
 	 */
 	int want_remap = 0;
 
-	ast_sockaddr_copy(us, &internip); /* starting guess for the internal address */
+	ast_sockaddr_copy(us, &internsipip); /* starting guess for the internal address */
 	/* now ask the system what would it use to talk to 'them' */
 	ast_ouraddrfor(them, us);
 	ast_sockaddr_copy(&theirs, them);
 
 	if (ast_sockaddr_is_ipv6(&theirs)) {
-		if (localaddr && !ast_sockaddr_isnull(&externaddr) && !ast_sockaddr_is_any(&bindaddr)) {
+		if (localaddr && !ast_sockaddr_isnull(&externaddr) && !ast_sockaddr_is_any(&udpbindaddr)) {
 			ast_log(LOG_WARNING, "Address remapping activated in sip.conf "
 				"but we're using IPv6, which doesn't need it. Please "
 				"remove \"localnet\" and/or \"externaddr\" settings.\n");
@@ -3988,7 +3993,7 @@
 				break;
 			case SIP_TRANSPORT_UDP:
 				if (!ast_sockaddr_port(&externaddr)) {
-					ast_sockaddr_set_port(us, ast_sockaddr_port(&bindaddr));
+				   ast_sockaddr_set_port(us, ast_sockaddr_port(&udpbindaddr));
 				}
 				break;
 			default:
@@ -4021,17 +4026,83 @@
 		case SIP_TRANSPORT_UDP:
 			/* fall through on purpose */
 		default:
-			if (!ast_sockaddr_is_any(&bindaddr)) {
-				ast_sockaddr_copy(us, &bindaddr);
+		   if (!ast_sockaddr_is_any(&udpbindaddr)) {
+		      ast_sockaddr_copy(us, &udpbindaddr);
 			}
 			if (!ast_sockaddr_port(us)) {
-				ast_sockaddr_set_port(us, ast_sockaddr_port(&bindaddr));
+			   ast_sockaddr_set_port(us, ast_sockaddr_port(&udpbindaddr));
 			}
 		}
 	}
 	ast_debug(3, "Setting SIP_TRANSPORT_%s with address %s\n", sip_get_transport(p->socket.type), ast_sockaddr_stringify(us));
 }
 
+/*! \brief NAT fix - decide which IP address to use for server?
+ *
+ * Using the localaddr structure built up with localnet statements in sip.conf
+ * apply it to their address to see if we need to substitute our
+ * externip or can get away with our internal rtpbindaddr
+ */
+static void ast_rtp_ouraddrfor(const struct ast_sockaddr *them, struct ast_sockaddr *us, struct sip_pvt *p)
+{
+   struct ast_sockaddr theirs;
+
+   /* Set want_remap to non-zero if we want to remap 'us' to an externally
+    * reachable IP address and port. This is done if:
+    * 1. we have a localaddr list (containing 'internal' addresses marked
+    *    as 'deny', so ast_apply_ha() will return AST_SENSE_DENY on them,
+    *    and AST_SENSE_ALLOW on 'external' ones);
+    * 2. externaddr is set, so we know what to use as the
+    *    externally visible address;
+    * 3. the remote address, 'them', is external;
+    * 4. the address returned by ast_ouraddrfor() is 'internal' (AST_SENSE_DENY
+    *    when passed to ast_apply_ha() so it does need to be remapped.
+    *    This fourth condition is checked later.
+    */
+   int want_remap = 0;
+
+   ast_sockaddr_copy(us, &internrtpip); /* starting guess for the internal address */
+   /* now ask the system what would it use to talk to 'them' */
+   ast_ouraddrfor(them, us);
+   ast_sockaddr_copy(&theirs, them);
+
+   if (ast_sockaddr_is_ipv6(&theirs)) {
+      if (localaddr && !ast_sockaddr_isnull(&externaddr)) {
+         ast_log(LOG_WARNING, "Address remapping activated in sip.conf "
+               "but we're using IPv6, which doesn't need it. Please "
+               "remove \"localnet\" and/or \"externaddr\" settings.\n");
+      }
+   } else {
+      want_remap = localaddr &&
+            !ast_sockaddr_isnull(&externaddr) &&
+            ast_apply_ha(localaddr, &theirs) == AST_SENSE_ALLOW ;
+   }
+
+   if (want_remap &&
+         (!sip_cfg.matchexternaddrlocally || !ast_apply_ha(localaddr, us)) ) {
+      /* if we used externhost, see if it is time to refresh the info */
+      if (externexpire && time(NULL) >= externexpire) {
+         if (ast_sockaddr_resolve_first(&externaddr, externhost, 0)) {
+            ast_log(LOG_NOTICE, "Warning: Re-lookup of '%s' failed!\n", externhost);
+         }
+         externexpire = time(NULL) + externrefresh;
+      }
+      if (!ast_sockaddr_isnull(&externaddr)) {
+         ast_sockaddr_copy(us, &externaddr);
+      }
+      ast_debug(1, "Target address %s is not local, substituting externaddr\n",
+            ast_sockaddr_stringify(them));
+   } else if (p) {
+      /* no remapping, but we bind to a specific address, so use it. */
+      if (!ast_sockaddr_is_any(&rtpbindaddr)) {
+         ast_sockaddr_copy(us, &rtpbindaddr);
+      }
+   } else if (!ast_sockaddr_is_any(&rtpbindaddr)) {
+      ast_sockaddr_copy(us, &rtpbindaddr);
+   }
+   ast_debug(3, "Setting RTP_TRANSPORT with address %s\n", ast_sockaddr_stringify_addr(us));
+}
+
 /*! \brief Append to SIP dialog history with arg list  */
 static __attribute__((format(printf, 2, 0))) void append_history_va(struct sip_pvt *p, const char *fmt, va_list ap)
 {
@@ -5880,7 +5951,7 @@
 		return 0;
 	}
 
-	ast_sockaddr_copy(&bindaddr_tmp, &bindaddr);
+	ast_sockaddr_copy(&bindaddr_tmp, &rtpbindaddr);
 	if (!(dialog->rtp = ast_rtp_instance_new(dialog->engine, sched, &bindaddr_tmp, NULL))) {
 		return -1;
 	}
@@ -6211,7 +6282,7 @@
 	if (!dialog->socket.type)
 		set_socket_transport(&dialog->socket, SIP_TRANSPORT_UDP);
 	if (!dialog->socket.port) {
-		dialog->socket.port = htons(ast_sockaddr_port(&bindaddr));
+		dialog->socket.port = htons(ast_sockaddr_port(&udpbindaddr));
 	}
 
 	if (!ast_sockaddr_port(&dialog->sa)) {
@@ -7595,7 +7666,7 @@
 	}
 
 	/* T38 can be supported by this dialog, create it and set the derived properties */
-	if ((p->udptl = ast_udptl_new_with_bindaddr(sched, io, 0, &bindaddr))) {
+	if ((p->udptl = ast_udptl_new_with_bindaddr(sched, io, 0, &udpbindaddr))) {
 		if (p->owner) {
 			ast_channel_set_fd(p->owner, 5, ast_udptl_fd(p->udptl));
 		}
@@ -8466,7 +8537,7 @@
 	 * use the handy random string generation function we already have
 	 */
 	ast_str_append(&uri, 0, "%s", generate_random_string(buf, size));
-	ast_str_append(&uri, 0, "@%s", ast_sockaddr_stringify_remote(&pvt->ourip));
+	ast_str_append(&uri, 0, "@%s", ast_sockaddr_stringify(&pvt->oursipip));
 	ast_copy_string(buf, ast_str_buffer(uri), size);
 	return buf;
 }
@@ -8481,7 +8552,7 @@
 static void build_callid_pvt(struct sip_pvt *pvt)
 {
 	char buf[33];
-	const char *host = S_OR(pvt->fromdomain, ast_sockaddr_stringify_remote(&pvt->ourip));
+	const char *host = S_OR(pvt->fromdomain, ast_sockaddr_stringify(&pvt->oursipip));
 
 	ast_string_field_build(pvt, callid, "%s@%s", generate_random_string(buf, sizeof(buf)), host);
 }
@@ -8682,10 +8753,12 @@
 	}
 
 	if (!addr) {
-		p->ourip = internip;
+	   p->oursipip = internsipip;
+	   p->ourrtpip = internrtpip;
 	} else {
 		ast_sockaddr_copy(&p->sa, addr);
-		ast_sip_ouraddrfor(&p->sa, &p->ourip, p);
+		ast_sip_ouraddrfor(&p->sa, &p->oursipip, p);
+		ast_rtp_ouraddrfor(&p->sa, &p->ourrtpip, p);
 	}
 
 	/* Copy global flags to this PVT at setup. */
@@ -12055,10 +12128,12 @@
 	p->method = intended_method;
 
 	if (!addr) {
-		ast_sockaddr_copy(&p->ourip, &internip);
+	   ast_sockaddr_copy(&p->oursipip, &internsipip);
+	   ast_sockaddr_copy(&p->ourrtpip, &internrtpip);
 	} else {
 		ast_sockaddr_copy(&p->sa, addr);
-		ast_sip_ouraddrfor(&p->sa, &p->ourip, p);
+		ast_sip_ouraddrfor(&p->sa, &p->oursipip, p);
+		ast_rtp_ouraddrfor(&p->sa, &p->ourrtpip, p);
 	}
 
 	p->branch = ast_random();
@@ -12379,8 +12454,16 @@
 		}
 	}
 	if (ast_strlen_zero(content_type)) {
-		/* "Content-Type" not set - use default value */
-		content_type = "text/plain;charset=UTF-8";
+	   if (strstr(p->msg_body, "<amsml "))
+	      add_header(req, "Content-Type", "application/amsml+xml");
+	   else if (strstr(p->msg_body, "<msml "))
+	      add_header(req, "Content-Type", "application/msml+xml");
+	   else if (strstr(p->msg_body, "<moml "))
+	      add_header(req, "Content-Type", "application/moml+xml");
+	   else {
+	      /* "Content-Type" not set - use default value */
+	      content_type = "text/plain;charset=UTF-8";
+	   }
 	}
 	add_header(req, "Content-Type", content_type);
 
@@ -12462,7 +12545,7 @@
 		return 0;
 	if (ast_strlen_zero(lid_name))
 		lid_name = lid_num;
-	fromdomain = S_OR(p->fromdomain, ast_sockaddr_stringify_host_remote(&p->ourip));
+	fromdomain = S_OR(p->fromdomain, ast_sockaddr_stringify_host_remote(&p->oursipip));
 
 	lid_num = ast_uri_encode(lid_num, tmp2, sizeof(tmp2), ast_uri_sip_user);
 
@@ -12876,7 +12959,7 @@
 	/* If our real IP differs from the local address returned by the RTP engine, use it. */
 	/* The premise is that if we are already using that IP to communicate with the client, */
 	/* we should be using it for RTP too. */
-        use_externip = ast_sockaddr_cmp_addr(&p->ourip, addr);
+	use_externip = ast_sockaddr_cmp_addr(&p->ourrtpip, addr);
 
 	/* Now, try to figure out where we want them to send data */
 	/* Is this a re-invite to move the media out, then use the original offer from caller  */
@@ -12897,7 +12980,7 @@
 		ast_sockaddr_copy(dest,
 				  !ast_sockaddr_isnull(&media_address) ? &media_address :
 				  !ast_sockaddr_is_any(addr) && !use_externip ? addr    :
-				  &p->ourip);
+				  &p->ourrtpip);
 		ast_sockaddr_set_port(dest, ast_sockaddr_port(addr));
 	}
 
@@ -12920,7 +13003,7 @@
 			ast_sockaddr_copy(vdest,
 					  !ast_sockaddr_isnull(&media_address) ? &media_address :
 					  !ast_sockaddr_is_any(vaddr) && !use_externip ? vaddr  :
-					  &p->ourip);
+					  &p->ourrtpip);
 			ast_sockaddr_set_port(vdest, ast_sockaddr_port(vaddr));
 		}
 	}
@@ -12944,7 +13027,7 @@
 			ast_sockaddr_copy(tdest,
 					  !ast_sockaddr_isnull(&media_address) ? &media_address  :
 					  !ast_sockaddr_is_any(taddr) && !use_externip ? taddr   :
-					  &p->ourip);
+					        &p->ourrtpip);
 			ast_sockaddr_set_port(tdest, ast_sockaddr_port(taddr));
 		}
 	}
@@ -13150,7 +13233,7 @@
 			needaudio = TRUE;
 
 		if (debug) {
-			ast_verbose("Audio is at %s\n", ast_sockaddr_stringify_port(&addr));
+			ast_verbose("Audio is at %s port %s\n", ast_sockaddr_stringify(&addr), ast_sockaddr_stringify_port(&addr));
 		}
 
 		/* Ok, we need video. Let's add what we need for video and set codecs.
@@ -13164,7 +13247,7 @@
 			if (p->maxcallbitrate)
 				snprintf(bandwidth, sizeof(bandwidth), "b=CT:%d\r\n", p->maxcallbitrate);
 			if (debug) {
-				ast_verbose("Video is at %s\n", ast_sockaddr_stringify(&vdest));
+				ast_verbose("Video is at %s port %s\n", ast_sockaddr_stringify(&vdest), ast_sockaddr_stringify_port(&vdest));
 			}
 
 			if (!doing_directmedia) {
@@ -13185,7 +13268,7 @@
 			ast_str_append(&m_text, 0, "m=text %d %s", ast_sockaddr_port(&tdest),
 				       get_sdp_rtp_profile(p, a_crypto ? 1 : 0, p->trtp));
 			if (debug) {  /* XXX should I use tdest below ? */
-				ast_verbose("Text is at %s\n", ast_sockaddr_stringify(&taddr));
+				ast_verbose("Text is at %s port %s\n", ast_sockaddr_stringify(&taddr), ast_sockaddr_stringify_port(&taddr));
 			}
 
 			if (!doing_directmedia) {
@@ -13308,12 +13391,12 @@
 		if (!ast_sockaddr_isnull(&p->udptlredirip)) {
 			ast_sockaddr_copy(&udptldest, &p->udptlredirip);
 		} else {
-			ast_sockaddr_copy(&udptldest, &p->ourip);
+		   ast_sockaddr_copy(&udptldest, &p->ourrtpip);
 			ast_sockaddr_set_port(&udptldest, ast_sockaddr_port(&udptladdr));
 		}
 
 		if (debug) {
-			ast_debug(1, "T.38 UDPTL is at %s port %d\n", ast_sockaddr_stringify_addr(&p->ourip), ast_sockaddr_port(&udptladdr));
+		   ast_debug(1, "T.38 UDPTL is at %s port %d\n", ast_sockaddr_stringify_addr(&p->ourrtpip), ast_sockaddr_port(&udptladdr));
 		}
 
 		/* We break with the "recommendation" and send our IP, in order that our
@@ -13738,10 +13821,10 @@
 
 	if (p->socket.type == SIP_TRANSPORT_UDP) {
 		ast_string_field_build(p, our_contact, "<sip:%s%s%s>", user,
-			ast_strlen_zero(user) ? "" : "@", ast_sockaddr_stringify_remote(&p->ourip));
+			ast_strlen_zero(user) ? "" : "@", ast_sockaddr_stringify_remote(&p->oursipip));
 	} else {
 		ast_string_field_build(p, our_contact, "<sip:%s%s%s;transport=%s>", user,
-			ast_strlen_zero(user) ? "" : "@", ast_sockaddr_stringify_remote(&p->ourip),
+			ast_strlen_zero(user) ? "" : "@", ast_sockaddr_stringify_remote(&p->oursipip),
 			sip_get_transport(p->socket.type));
 	}
 }
@@ -13750,7 +13833,7 @@
 static void initreqprep(struct sip_request *req, struct sip_pvt *p, int sipmethod, const char * const explicit_uri)
 {
 	struct ast_str *invite = ast_str_alloca(256);
-	char from[256];
+	char from[256], asserted_id[256];
 	char to[256];
 	char tmp_n[SIPBUFSIZE/2];	/* build a local copy of 'n' if needed */
 	char tmp_l[SIPBUFSIZE/2];	/* build a local copy of 'l' if needed */
@@ -13763,6 +13846,13 @@
 	int cid_has_num = 1;
 	struct ast_party_id connected_id;
 
+	//int extra_headers = 0, i;
+	char header_name[10][128];
+	char header_field[10][256];
+
+	memset(header_name, 0, sizeof(header_name));
+	memset(header_field, 0, sizeof(header_field));
+
 	if (ast_test_flag(&p->flags[0], SIP_USEREQPHONE)) {
 	 	const char *s = p->username;	/* being a string field, cannot be NULL */
 
@@ -13785,7 +13875,7 @@
 
 	snprintf(p->lastmsg, sizeof(p->lastmsg), "Init: %s", sip_methods[sipmethod].text);
 
-	d = S_OR(p->fromdomain, ast_sockaddr_stringify_host_remote(&p->ourip));
+	d = S_OR(p->fromdomain, ast_sockaddr_stringify_host_remote(&p->oursipip));
 	if (p->owner) {
 		connected_id = ast_channel_connected_effective_id(p->owner);
 
@@ -13843,21 +13933,69 @@
 		ast_uri_encode(l, tmp_l, sizeof(tmp_l), ast_uri_sip_user);
 	}
 
-	ourport = (p->fromdomainport) ? p->fromdomainport : ast_sockaddr_port(&p->ourip);
+	ourport = (p->fromdomainport) ? p->fromdomainport : ast_sockaddr_port(&p->oursipip);
 
-	/* If a caller id name was specified, add a display name. */
-	if (cid_has_name || !cid_has_num) {
-		snprintf(from, sizeof(from), "\"%s\" ", n);
-	} else {
-		from[0] = '\0';
+	if (p->owner && !ast_strlen_zero(ast_channel_cid_ani(p->owner)))
+	{
+	   // prepare for "teste" <sip:ola@ola.pt>
+	   if (strchr(ast_channel_cid_ani(p->owner), '\"'))
+	   {
+	      // if (ourport != STANDARD_SIP_PORT) then WMS must comply with that!
+	      // Build From:
+	      snprintf(from, sizeof(from), "%s;tag=%s", ast_channel_cid_ani(p->owner), p->tag);
+	      // Build P-Asserted-Identity
+	      snprintf(asserted_id, sizeof(asserted_id), "%s", ast_channel_cid_ani(p->owner));
+	   }
+	   else if (strchr(ast_channel_cid_ani(p->owner), '@'))
+	   {
+	      if (!sip_standard_port(p->socket.type, ourport))
+	      {
+	         // Build From:
+	         snprintf(from, sizeof(from), "<sip:%s:%d>;tag=%s", ast_channel_cid_ani(p->owner), ourport, p->tag);
+	         // Build P-Asserted-Identity
+	         snprintf(asserted_id, sizeof(asserted_id), "<sip:%s:%d>",
+	               ast_channel_cid_ani(p->owner), ourport);
+	      }
+	      else
+	      {
+	         // Build From:
+	         snprintf(from, sizeof(from), "<sip:%s>;tag=%s", ast_channel_cid_ani(p->owner), p->tag);
+	         // Build P-Asserted-Identity
+	         snprintf(asserted_id, sizeof(asserted_id), "<sip:%s>", ast_channel_cid_ani(p->owner));
+	      }
+	   }
+	   else
+	   {
+	      if (!sip_standard_port(p->socket.type, ourport) && ast_strlen_zero(p->fromdomain))
+	      {
+	         snprintf(from, sizeof(from), "\"%s\" <sip:%s@%s:%d>;tag=%s", n, l, d, ourport, p->tag);
+	         snprintf(asserted_id, sizeof(asserted_id), "\"%s\" <sip:%s@%s:%d>", n, l, d, ourport);
+	      }
+	      else
+	      {
+	         snprintf(from, sizeof(from), "\"%s\" <sip:%s@%s>;tag=%s", n, l, d, p->tag);
+	         snprintf(asserted_id, sizeof(asserted_id), "\"%s\" <sip:%s@%s>", n, l, d);
+	      }
+	   }
+	   if (sip_debug_test_pvt(p))
+	      ast_verbose("Setting From: and P-Asserted-Identity: to ANI value %s\n", from);
 	}
+	else {
 
-	if (!sip_standard_port(p->socket.type, ourport)) {
-		size_t offset = strlen(from);
-		snprintf(&from[offset], sizeof(from) - offset, "<sip:%s@%s:%d>;tag=%s", tmp_l, d, ourport, p->tag);
-	} else {
-		size_t offset = strlen(from);
-		snprintf(&from[offset], sizeof(from) - offset, "<sip:%s@%s>;tag=%s", tmp_l, d, p->tag);
+	   /* If a caller id name was specified, add a display name. */
+	   if (cid_has_name || !cid_has_num) {
+	      snprintf(from, sizeof(from), "\"%s\" ", n);
+	   } else {
+	      from[0] = '\0';
+	   }
+
+	   if (!sip_standard_port(p->socket.type, ourport)) {
+	      size_t offset = strlen(from);
+	      snprintf(&from[offset], sizeof(from) - offset, "<sip:%s@%s:%d>;tag=%s", tmp_l, d, ourport, p->tag);
+	   } else {
+	      size_t offset = strlen(from);
+	      snprintf(&from[offset], sizeof(from) - offset, "<sip:%s@%s>;tag=%s", tmp_l, d, p->tag);
+	   }
 	}
 
 	if (!ast_strlen_zero(explicit_uri)) {
@@ -13974,11 +14112,11 @@
 	if (!diverting_from.name.valid
 		|| ast_strlen_zero(diverting_from.name.str)) {
 		snprintf(header_text, sizeof(header_text), "<sip:%s@%s>;reason=%s", diverting_from.number.str,
-				ast_sockaddr_stringify_host_remote(&pvt->ourip), reason);
+				ast_sockaddr_stringify_host_remote(&pvt->oursipip), reason);
 	} else {
 		snprintf(header_text, sizeof(header_text), "\"%s\" <sip:%s@%s>;reason=%s",
 				diverting_from.name.str, diverting_from.number.str,
-				ast_sockaddr_stringify_host_remote(&pvt->ourip), reason);
+				ast_sockaddr_stringify_host_remote(&pvt->oursipip), reason);
 	}
 
 	add_header(req, "Diversion", header_text);
@@ -14003,7 +14141,7 @@
 		dialog_unref(pvt, "create_addr failed in transmit_publish. Unref dialog");
 		return -1;
 	}
-	ast_sip_ouraddrfor(&pvt->sa, &pvt->ourip, pvt);
+	ast_sip_ouraddrfor(&pvt->sa, &pvt->oursipip, pvt);
 	ast_set_flag(&pvt->flags[0], SIP_OUTGOING);
 	expires = (publish_type == SIP_PUBLISH_REMOVE) ? 0 : DEFAULT_PUBLISH_EXPIRES;
 	pvt->expiry = expires;
@@ -14337,7 +14475,7 @@
 	}
 	set_socket_transport(&mwi->call->socket, mwi->transport);
 	mwi->call->socket.port = htons(mwi->portno);
-	ast_sip_ouraddrfor(&mwi->call->sa, &mwi->call->ourip, mwi->call);
+	ast_sip_ouraddrfor(&mwi->call->sa, &mwi->call->oursipip, mwi->call);
 	build_contact(mwi->call);
 	build_via(mwi->call);
 
@@ -14749,7 +14887,7 @@
 {
 	struct sip_request req;
 	struct ast_str *out = ast_str_alloca(500);
-	int ourport = (p->fromdomainport) ? p->fromdomainport : ast_sockaddr_port(&p->ourip);
+	int ourport = (p->fromdomainport) ? p->fromdomainport : ast_sockaddr_port(&p->oursipip);
 	const char *domain;
 	const char *exten = S_OR(vmexten, default_vmexten);
 
@@ -14759,7 +14897,7 @@
 	ast_str_append(&out, 0, "Messages-Waiting: %s\r\n", newmsgs ? "yes" : "no");
 
 	/* domain initialization occurs here because initreqprep changes ast_sockaddr_stringify string. */
-	domain = S_OR(p->fromdomain, ast_sockaddr_stringify_host_remote(&p->ourip));
+	domain = S_OR(p->fromdomain, ast_sockaddr_stringify_host_remote(&p->oursipip));
 
 	if (!sip_standard_port(p->socket.type, ourport)) {
 		if (p->socket.type == SIP_TRANSPORT_UDP) {
@@ -15154,7 +15292,7 @@
 	} else {
 		/* Build callid for registration if we haven't registered before */
 		if (!r->callid_valid) {
-			build_callid_registry(r, &internip, default_fromdomain);
+			build_callid_registry(r, &internsipip, default_fromdomain);
 			r->callid_valid = TRUE;
 		}
 		/* Allocate SIP dialog for registration */
@@ -15258,7 +15396,7 @@
 		  based on whether the remote host is on the external or
 		  internal network so we can register through nat
 		 */
-		ast_sip_ouraddrfor(&p->sa, &p->ourip, p);
+		ast_sip_ouraddrfor(&p->sa, &p->oursipip, p);
 		build_contact(p);
 	}
 
@@ -20441,8 +20579,8 @@
 
 	ast_cli(a->fd, "\n\nGlobal Settings:\n");
 	ast_cli(a->fd, "----------------\n");
-	ast_cli(a->fd, "  UDP Bindaddress:        %s\n", ast_sockaddr_stringify(&bindaddr));
-	if (ast_sockaddr_is_ipv6(&bindaddr) && ast_sockaddr_is_any(&bindaddr)) {
+	ast_cli(a->fd, "  UDP Bindaddress:        %s\n", ast_sockaddr_stringify(&udpbindaddr));
+	if (ast_sockaddr_is_ipv6(&udpbindaddr) && ast_sockaddr_is_any(&udpbindaddr)) {
 		ast_cli(a->fd, "  ** Additional Info:\n");
 		ast_cli(a->fd, "     [::] may include IPv4 in addition to IPv6, if such a feature is enabled in the OS.\n");
 	}
@@ -20454,6 +20592,7 @@
 		default_tls_cfg.enabled != FALSE ?
 				ast_sockaddr_stringify(&sip_tls_desc.local_address) :
 				"Disabled");
+	ast_cli(a->fd, "  RTP Bindaddress:        %s\n", ast_sockaddr_stringify_addr(&rtpbindaddr));
 	ast_cli(a->fd, "  Videosupport:           %s\n", AST_CLI_YESNO(ast_test_flag(&global_flags[1], SIP_PAGE2_VIDEOSUPPORT)));
 	ast_cli(a->fd, "  Textsupport:            %s\n", AST_CLI_YESNO(ast_test_flag(&global_flags[1], SIP_PAGE2_TEXTSUPPORT)));
 	ast_cli(a->fd, "  Ignore SDP sess. ver.:  %s\n", AST_CLI_YESNO(ast_test_flag(&global_flags[1], SIP_PAGE2_IGNORESDPVERSION)));
@@ -20996,7 +21135,7 @@
 			if (ast_sockaddr_isnull(&cur->redirip)) {
 				ast_cli(a->fd,
 					"  Audio IP:               %s (local)\n",
-					ast_sockaddr_stringify_addr(&cur->ourip));
+					ast_sockaddr_stringify_addr(&cur->ourrtpip));
 			} else {
 				ast_cli(a->fd,
 					"  Audio IP:               %s (Outside bridge)\n",
@@ -21280,6 +21419,43 @@
 		}
 		transmit_response(p, "200 OK", req);
 		return;
+		//--- application/msml+xml ----------
+		//--- application/mscml ----------
+	} else if (!strcasecmp(c, "application/amsml+xml") ||
+	      !strcasecmp(c, "application/msml+xml") ||
+	      !strcasecmp(c, "application/moml+xml") ||
+	      !strcasecmp(c, "application/mscml")) {
+	   char *buf;
+
+	   if ((buf = get_content(req)) == NULL)
+	   {
+	      ast_log(LOG_WARNING, "Unable to retrieve SIP INFO from %s\n", p->callid);
+	      return;
+	   }
+	   if (p->owner)
+	   {
+	      struct ast_frame f;
+
+	      memset(&f, 0, sizeof(f));
+	      f.frametype = AST_FRAME_TEXT;
+	      f.subclass.integer = AST_TEXT_XML;
+	      f.offset = 0;
+	      f.data.ptr = buf;
+	      f.datalen = strlen(buf);
+	      ast_queue_frame(p->owner, &f);
+	   }
+	   else
+	   {  /* not a PBX call */
+	      ast_log(LOG_WARNING,"Received message to %s from %s, dropped it...\n  Content-Type:%s\n  Message: %s\n", sip_get_header(req,"To"), sip_get_header(req,"From"), c, buf);
+	      transmit_response(p, "481 Call leg/transaction does not exist", req);
+	      //transmit_response(p, "405 Method Not Allowed", req); /* Good enough, or? */
+
+	      sip_scheddestroy(p, DEFAULT_TRANS_TIMEOUT);
+	      return;
+	   }
+	   transmit_response(p, "200 OK", req);
+	   return;
+
 	} else if (!ast_strlen_zero(c = sip_get_header(req, "X-ClientCode"))) {
 		/* Client code (from SNOM phone) */
 		if (ast_test_flag(&p->flags[0], SIP_USECLIENTCODE)) {
@@ -21514,7 +21690,7 @@
 		}
 
 		/* Now that we have the peer's address, set our ip and change callid */
-		ast_sip_ouraddrfor(&p->sa, &p->ourip, p);
+		ast_sip_ouraddrfor(&p->sa, &p->oursipip, p);
 		build_via(p);
 
 		change_callid_pvt(p, NULL);
@@ -26790,7 +26966,7 @@
 	if (!ast_strlen_zero(to_user)) {
 		ast_string_field_set(pvt, username, to_user);
 	}
-	ast_sip_ouraddrfor(&pvt->sa, &pvt->ourip, pvt);
+	ast_sip_ouraddrfor(&pvt->sa, &pvt->oursipip, pvt);
 	ast_set_flag(&pvt->flags[0], SIP_OUTGOING);
 
 	/* XXX Does pvt->expiry need to be set? */
@@ -28228,7 +28404,7 @@
 	req.socket.fd = sipsock;
 	set_socket_transport(&req.socket, SIP_TRANSPORT_UDP);
 	req.socket.tcptls_session	= NULL;
-	req.socket.port = htons(ast_sockaddr_port(&bindaddr));
+	req.socket.port = htons(ast_sockaddr_port(&udpbindaddr));
 
 	handle_request_do(&req, &addr);
 	deinit_req(&req);
@@ -28378,7 +28554,7 @@
 	const struct ast_sockaddr *addr = NULL;
 
 	if ((transport == SIP_TRANSPORT_UDP) || !transport) {
-		addr = &bindaddr;
+		addr = &udpbindaddr;
 	} else if (transport == SIP_TRANSPORT_TCP || transport == SIP_TRANSPORT_WS) {
 		addr = &sip_tcp_desc.local_address;
 	} else if (transport == SIP_TRANSPORT_TLS || transport == SIP_TRANSPORT_WSS) {
@@ -28627,7 +28803,7 @@
 			return -1;
 		}
 		/* Recalculate our side, and recalculate Call ID */
-		ast_sip_ouraddrfor(&p->sa, &p->ourip, p);
+		ast_sip_ouraddrfor(&p->sa, &p->oursipip, p);
 		build_via(p);
 
 		ao2_lock(peer);
@@ -29356,7 +29532,7 @@
 	}
 
 	/* Recalculate our side, and recalculate Call ID */
-	ast_sip_ouraddrfor(&p->sa, &p->ourip, p);
+	ast_sip_ouraddrfor(&p->sa, &p->oursipip, p);
 	build_via(p);
 
 	/* Change the dialog callid. */
@@ -29661,7 +29837,8 @@
 	if (ast_strlen_zero(p->peername) && ext)
 		ast_string_field_set(p, peername, ext);
 	/* Recalculate our side, and recalculate Call ID */
-	ast_sip_ouraddrfor(&p->sa, &p->ourip, p);
+	ast_sip_ouraddrfor(&p->sa, &p->oursipip, p);
+	ast_rtp_ouraddrfor(&p->sa, &p->ourrtpip, p);
 	build_via(p);
 
 	/* Change the dialog callid. */
@@ -31077,7 +31254,7 @@
 	struct ast_flags dummy[3];
 	struct ast_flags config_flags = { (reason == CHANNEL_MODULE_LOAD || reason == CHANNEL_ACL_RELOAD) ? 0 : ast_test_flag(&global_flags[1], SIP_PAGE2_RTCACHEFRIENDS) ? 0 : CONFIG_FLAG_FILEUNCHANGED };
 	int auto_sip_domains = FALSE;
-	struct ast_sockaddr old_bindaddr = bindaddr;
+	struct ast_sockaddr old_bindaddr = udpbindaddr;
 	int registry_count = 0, peer_count = 0, timerb_set = 0, timert1_set = 0;
 	int subscribe_network_change = 1;
 	time_t run_start, run_end;
@@ -31175,8 +31352,11 @@
 	ast_clear_flag(&global_flags[2], AST_FLAGS_ALL);
 
 	/* Reset IP addresses  */
-	ast_sockaddr_parse(&bindaddr, "0.0.0.0:0", 0);
-	memset(&internip, 0, sizeof(internip));
+	ast_sockaddr_parse(&udpbindaddr, "0.0.0.0:0", 0);
+	memset(&internsipip, 0, sizeof(internsipip));
+
+	ast_sockaddr_parse(&rtpbindaddr, "0.0.0.0:0", 0);
+	memset(&internrtpip, 0, sizeof(internrtpip));
 
 	/* Free memory for local network address mask */
 	ast_free_ha(localaddr);
@@ -31629,8 +31809,12 @@
 		} else if (!strcasecmp(v->name, "registerattempts")) {
 			global_regattempts_max = atoi(v->value);
 		} else if (!strcasecmp(v->name, "bindaddr") || !strcasecmp(v->name, "udpbindaddr")) {
-			if (ast_parse_arg(v->value, PARSE_ADDR, &bindaddr)) {
-				ast_log(LOG_WARNING, "Invalid address: %s\n", v->value);
+		   if (ast_parse_arg(v->value, PARSE_ADDR, &udpbindaddr)) {
+		      ast_log(LOG_WARNING, "Invalid address: %s\n", v->value);
+		   }
+		} else if (!strcasecmp(v->name, "rtpbindaddr")) {
+		   if (ast_parse_arg(v->value, PARSE_ADDR, &rtpbindaddr)) {
+		      ast_log(LOG_WARNING, "Invalid address: %s\n", v->value);
 			}
 		} else if (!strcasecmp(v->name, "localnet")) {
 			struct ast_ha *na;
@@ -31962,32 +32146,45 @@
 	}
 
 	if (bindport) {
-		if (ast_sockaddr_port(&bindaddr)) {
+		if (ast_sockaddr_port(&udpbindaddr)) {
 			ast_log(LOG_WARNING, "bindport is also specified in bindaddr. "
 				"Using %d.\n", bindport);
 		}
-		ast_sockaddr_set_port(&bindaddr, bindport);
+		ast_sockaddr_set_port(&udpbindaddr, bindport);
 	}
 
-	if (!ast_sockaddr_port(&bindaddr)) {
-		ast_sockaddr_set_port(&bindaddr, STANDARD_SIP_PORT);
+	if (!ast_sockaddr_port(&udpbindaddr)) {
+		ast_sockaddr_set_port(&udpbindaddr, STANDARD_SIP_PORT);
 	}
 
 	/* Set UDP address and open socket */
-	ast_sockaddr_copy(&internip, &bindaddr);
-	if (ast_find_ourip(&internip, &bindaddr, 0)) {
+	ast_sockaddr_copy(&internsipip, &udpbindaddr);
+	if (ast_find_ourip(&internsipip, &udpbindaddr, 0)) {
 		ast_log(LOG_WARNING, "Unable to get own IP address, SIP disabled\n");
 		ast_config_destroy(cfg);
 		return 0;
 	}
 
+	ast_sockaddr_copy(&internrtpip, &rtpbindaddr);
+	if (ast_find_ourip(&internrtpip, &rtpbindaddr, 0)) {
+	   ast_log(LOG_WARNING, "Unable to get own RTP IP address, SIP disabled\n");
+	   ast_config_destroy(cfg);
+	   return 0;
+	}
+	if (ast_sockaddr_is_ipv6(&rtpbindaddr) != ast_sockaddr_is_ipv6(&udpbindaddr))
+	{
+	   ast_log(LOG_WARNING, "RTP and SIP bind addresses differ in family type (IPv6), SIP disabled\n");
+	   ast_config_destroy(cfg);
+	   return 0;
+	}
+
 	ast_mutex_lock(&netlock);
-	if ((sipsock > -1) && (ast_sockaddr_cmp(&old_bindaddr, &bindaddr))) {
+	if ((sipsock > -1) && (ast_sockaddr_cmp(&old_bindaddr, &udpbindaddr))) {
 		close(sipsock);
 		sipsock = -1;
 	}
 	if (sipsock < 0) {
-		sipsock = socket(ast_sockaddr_is_ipv6(&bindaddr) ?
+		sipsock = socket(ast_sockaddr_is_ipv6(&udpbindaddr) ?
 				 AF_INET6 : AF_INET, SOCK_DGRAM, 0);
 		if (sipsock < 0) {
 			ast_log(LOG_WARNING, "Unable to create SIP socket: %s\n", strerror(errno));
@@ -32004,13 +32201,13 @@
 
 			ast_enable_packet_fragmentation(sipsock);
 
-			if (ast_bind(sipsock, &bindaddr) < 0) {
+			if (ast_bind(sipsock, &udpbindaddr) < 0) {
 				ast_log(LOG_WARNING, "Failed to bind to %s: %s\n",
-					ast_sockaddr_stringify(&bindaddr), strerror(errno));
+					ast_sockaddr_stringify(&udpbindaddr), strerror(errno));
 				close(sipsock);
 				sipsock = -1;
 			} else {
-				ast_verb(2, "SIP Listening on %s\n", ast_sockaddr_stringify(&bindaddr));
+				ast_verb(2, "SIP Listening on %s\n", ast_sockaddr_stringify(&udpbindaddr));
 				ast_set_qos(sipsock, global_tos_sip, global_cos_sip, "SIP");
 			}
 		}
@@ -32022,7 +32219,7 @@
 	/* Start TCP server */
 	if (sip_cfg.tcp_enabled) {
 		if (ast_sockaddr_isnull(&sip_tcp_desc.local_address)) {
-			ast_sockaddr_copy(&sip_tcp_desc.local_address, &bindaddr);
+			ast_sockaddr_copy(&sip_tcp_desc.local_address, &udpbindaddr);
 		}
 		if (!ast_sockaddr_port(&sip_tcp_desc.local_address)) {
 			ast_sockaddr_set_port(&sip_tcp_desc.local_address, STANDARD_SIP_PORT);
@@ -32043,7 +32240,7 @@
 
 	if (ast_ssl_setup(sip_tls_desc.tls_cfg)) {
 		if (ast_sockaddr_isnull(&sip_tls_desc.local_address)) {
-			ast_sockaddr_copy(&sip_tls_desc.local_address, &bindaddr);
+			ast_sockaddr_copy(&sip_tls_desc.local_address, &udpbindaddr);
 			ast_sockaddr_set_port(&sip_tls_desc.local_address,
 					      STANDARD_TLS_PORT);
 		}
@@ -32173,12 +32370,12 @@
 		char temp[MAXHOSTNAMELEN];
 
 		/* First our default IP address */
-		if (!ast_sockaddr_isnull(&bindaddr) && !ast_sockaddr_is_any(&bindaddr)) {
-			add_sip_domain(ast_sockaddr_stringify_addr(&bindaddr),
+		if (!ast_sockaddr_isnull(&udpbindaddr) && !ast_sockaddr_is_any(&udpbindaddr)) {
+			add_sip_domain(ast_sockaddr_stringify_addr(&udpbindaddr),
 				       SIP_DOMAIN_AUTO, NULL);
-		} else if (!ast_sockaddr_isnull(&internip) && !ast_sockaddr_is_any(&internip)) {
+		} else if (!ast_sockaddr_isnull(&internsipip) && !ast_sockaddr_is_any(&internsipip)) {
 		/* Our internal IP address, if configured */
-			add_sip_domain(ast_sockaddr_stringify_addr(&internip),
+			add_sip_domain(ast_sockaddr_stringify_addr(&internsipip),
 				       SIP_DOMAIN_AUTO, NULL);
 		} else {
 			ast_log(LOG_NOTICE, "Can't add wildcard IP address to domain list, please add IP address to domain manually.\n");
@@ -32186,14 +32383,14 @@
 
 		/* If TCP is running on a different IP than UDP, then add it too */
 		if (!ast_sockaddr_isnull(&sip_tcp_desc.local_address) &&
-		    !ast_sockaddr_cmp(&bindaddr, &sip_tcp_desc.local_address)) {
+		    !ast_sockaddr_cmp(&udpbindaddr, &sip_tcp_desc.local_address)) {
 			add_sip_domain(ast_sockaddr_stringify_addr(&sip_tcp_desc.local_address),
 				       SIP_DOMAIN_AUTO, NULL);
 		}
 
 		/* If TLS is running on a different IP than UDP and TCP, then add that too */
 		if (!ast_sockaddr_isnull(&sip_tls_desc.local_address) &&
-		    !ast_sockaddr_cmp(&bindaddr, &sip_tls_desc.local_address) &&
+		    !ast_sockaddr_cmp(&udpbindaddr, &sip_tls_desc.local_address) &&
 		    !ast_sockaddr_cmp(&sip_tcp_desc.local_address,
 				      &sip_tls_desc.local_address)) {
 			add_sip_domain(ast_sockaddr_stringify_addr(&sip_tcp_desc.local_address),
@@ -32309,11 +32506,11 @@
 	if (!ast_test_flag(&p->flags[0], SIP_GOTREFER)) {
 		if (!p->pendinginvite) {
 			ast_debug(3, "Sending reinvite on SIP '%s' - It's UDPTL soon redirected to IP %s\n",
-					p->callid, ast_sockaddr_stringify(udptl ? &p->udptlredirip : &p->ourip));
+					p->callid, ast_sockaddr_stringify(udptl ? &p->udptlredirip : &p->ourrtpip));
 			transmit_reinvite_with_sdp(p, TRUE, FALSE);
 		} else if (!ast_test_flag(&p->flags[0], SIP_PENDINGBYE)) {
 			ast_debug(3, "Deferring reinvite on SIP '%s' - It's UDPTL will be redirected to IP %s\n",
-					p->callid, ast_sockaddr_stringify(udptl ? &p->udptlredirip : &p->ourip));
+					p->callid, ast_sockaddr_stringify(udptl ? &p->udptlredirip : &p->ourrtpip));
 			ast_set_flag(&p->flags[0], SIP_NEEDREINVITE);
 		}
 	}
@@ -32597,12 +32794,12 @@
 		if (ast_channel_state(chan) != AST_STATE_UP) {     /* We are in early state */
 			if (p->do_history)
 				append_history(p, "ExtInv", "Initial invite sent with remote bridge proposal.");
-			ast_debug(1, "Early remote bridge setting SIP '%s' - Sending media to %s\n", p->callid, ast_sockaddr_stringify(instance ? &p->redirip : &p->ourip));
+			ast_debug(1, "Early remote bridge setting SIP '%s' - Sending media to %s\n", p->callid, ast_sockaddr_stringify(instance ? &p->redirip : &p->ourrtpip));
 		} else if (!p->pendinginvite) {	 /* We are up, and have no outstanding invite */
-			ast_debug(3, "Sending reinvite on SIP '%s' - It's audio soon redirected to IP %s\n", p->callid, ast_sockaddr_stringify(instance ? &p->redirip : &p->ourip));
+			ast_debug(3, "Sending reinvite on SIP '%s' - It's audio soon redirected to IP %s\n", p->callid, ast_sockaddr_stringify(instance ? &p->redirip : &p->ourrtpip));
 			transmit_reinvite_with_sdp(p, FALSE, FALSE);
 		} else if (!ast_test_flag(&p->flags[0], SIP_PENDINGBYE)) {
-			ast_debug(3, "Deferring reinvite on SIP '%s' - It's audio will be redirected to IP %s\n", p->callid, ast_sockaddr_stringify(instance ? &p->redirip : &p->ourip));
+			ast_debug(3, "Deferring reinvite on SIP '%s' - It's audio will be redirected to IP %s\n", p->callid, ast_sockaddr_stringify(instance ? &p->redirip : &p->ourrtpip));
 			/* We have a pending Invite. Send re-invite when we're done with the invite */
 			ast_set_flag(&p->flags[0], SIP_NEEDREINVITE);
 		}
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-11.3.0.p005/channels/sip/include/sip.h asterisk-11.3.0/channels/sip/include/sip.h
--- asterisk-11.3.0.p005/channels/sip/include/sip.h	2013-05-16 09:32:03.080687666 +0100
+++ asterisk-11.3.0/channels/sip/include/sip.h	2013-05-16 17:28:52.776752000 +0100
@@ -1139,7 +1139,8 @@
 	int rtpkeepalive;                   /*!< RTP send packets for keepalive */
 	struct ast_acl_list *directmediaacl; /*!< Which IPs are allowed to interchange direct media with this peer - copied from sip_peer */
 	struct ast_sockaddr recv;            /*!< Received as */
-	struct ast_sockaddr ourip;           /*!< Our IP (as seen from the outside) */
+	struct ast_sockaddr oursipip;       /*!< Our SIP IP (as seen from the outside) */
+	struct ast_sockaddr ourrtpip;                      /*!< Our RTP IP */
 
 	char url_params[AST_MAX_PARAMS];  /* sip_extended_params support */
 	char ic_extra_data[2048];
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-11.3.0.p005/channels/sip/security_events.c asterisk-11.3.0/channels/sip/security_events.c
--- asterisk-11.3.0.p005/channels/sip/security_events.c	2013-05-16 09:32:03.040687713 +0100
+++ asterisk-11.3.0/channels/sip/security_events.c	2013-05-16 19:38:05.444720000 +0100
@@ -65,7 +65,7 @@
 		.common.service    = "SIP",
 		.common.account_id = p->exten,
 		.common.local_addr = {
-			.addr      = &p->ourip,
+			.addr      = &p->oursipip,
 			.transport = security_event_get_transport(p)
 		},
 		.common.remote_addr = {
@@ -90,7 +90,7 @@
                 .common.service     = "SIP",
                 .common.account_id  = p->exten,
                 .common.local_addr  = {
-                        .addr       = &p->ourip,
+                        .addr       = &p->oursipip,
                         .transport  = security_event_get_transport(p)
                 },
                 .common.remote_addr = {
@@ -116,7 +116,7 @@
                 .common.service     = "SIP",
                 .common.account_id  = p->exten,
                 .common.local_addr  = {
-                        .addr       = &p->ourip,
+                        .addr       = &p->oursipip,
                         .transport  = security_event_get_transport(p)
                 },
                 .common.remote_addr = {
@@ -145,7 +145,7 @@
                 .common.service     = "SIP",
                 .common.account_id  = p->exten,
                 .common.local_addr  = {
-                        .addr       = &p->ourip,
+                        .addr       = &p->oursipip,
                         .transport  = security_event_get_transport(p)
                 },
                 .common.remote_addr = {
@@ -171,7 +171,7 @@
                 .common.service    = "SIP",
                 .common.account_id = p->exten,
                 .common.local_addr = {
-                        .addr      = &p->ourip,
+                        .addr      = &p->oursipip,
                         .transport = security_event_get_transport(p)
                 },
                 .common.remote_addr = {
@@ -197,7 +197,7 @@
                 .common.service    = "SIP",
                 .common.account_id = account_id,
                 .common.local_addr = {
-                        .addr      = &p->ourip,
+                        .addr      = &p->oursipip,
                         .transport = security_event_get_transport(p)
                 },
                 .common.remote_addr = {
@@ -233,7 +233,7 @@
                 .common.service    = "SIP",
                 .common.account_id = account_id,
                 .common.local_addr = {
-                        .addr      = &p->ourip,
+                        .addr      = &p->oursipip,
                         .transport = security_event_get_transport(p)
                 },
                 .common.remote_addr = {
@@ -266,7 +266,7 @@
                 .common.service    = "SIP",
                 .common.account_id = p->exten,
                 .common.local_addr = {
-                        .addr      = &p->ourip,
+                        .addr      = &p->oursipip,
                         .transport = security_event_get_transport(p)
                 },
                 .common.remote_addr = {
