diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-base-11.3.0/res/res_rtp_asterisk.c asterisk-11.3.0/res/res_rtp_asterisk.c
--- asterisk-base-11.3.0/res/res_rtp_asterisk.c	2016-01-06 15:44:30.618305059 +0000
+++ asterisk-11.3.0/res/res_rtp_asterisk.c	2016-01-07 09:16:23.253367000 +0000
@@ -172,6 +172,13 @@
 
 #define COMPONENT_RTP 1
 #define COMPONENT_RTCP 2
+	
+/*! \brief RTP learning mode tracking information */
+struct rtp_learning_info {
+	int max_seq;	/*!< The highest sequence number received */
+	int packets;	/*!< The number of remaining packets before the source is accepted */
+	
+};
 
 /*! \brief RTP session description */
 struct ast_rtp {
@@ -243,8 +250,8 @@
 	 * Learning mode values based on pjmedia's probation mode.  Many of these values are redundant to the above,
 	 * but these are in place to keep learning mode sequence values sealed from their normal counterparts.
 	 */
-	uint16_t learning_max_seq;		/*!< Highest sequence number heard */
-	int learning_probation;		/*!< Sequential packets untill source is valid */
+	struct rtp_learning_info rtp_source_learn;	/* Learning mode track for the expected RTP source */
+	struct rtp_learning_info alt_source_learn;	/* Learning mode tracking for a new RTP source after one has been chosen */
 
 	struct rtp_red *red;
 
@@ -1580,12 +1587,12 @@
  * \note This is an adaptation of pjmedia's pjmedia_rtp_seq_init function.
  *
  * \param rtp pointer to rtp struct used with the received rtp packet.
- * \param seq sequence number read from the rtp header
+ * \param seq sequence number read from the rtp header to initialize the information with
  */
-static void rtp_learning_seq_init(struct ast_rtp *rtp, uint16_t seq)
+static void rtp_learning_seq_init(struct rtp_learning_info *info, uint16_t seq)
 {
-	rtp->learning_max_seq = seq - 1;
-	rtp->learning_probation = learning_min_sequential;
+	info->max_seq = seq - 1;
+	info->packets = learning_min_sequential;
 }
 
 /*!
@@ -1595,27 +1602,19 @@
  *
  * \param rtp pointer to rtp struct used with the received rtp packet.
  * \param seq sequence number read from the rtp header
- * \return boolean value indicating if probation mode is active at the end of the function
+ * \retval 0 if probation mode should exit for this address
+ * \retval non-zero if probation mode should continue
  */
-static int rtp_learning_rtp_seq_update(struct ast_rtp *rtp, uint16_t seq)
+static int rtp_learning_rtp_seq_update(struct rtp_learning_info *info, uint16_t seq)
 {
-	int probation = 1;
-
-	ast_debug(1, "%p -- probation = %d, seq = %d\n", rtp, rtp->learning_probation, seq);
-
-	if (seq == rtp->learning_max_seq + 1) {
+	if (seq == info->max_seq + 1) {
 		/* packet is in sequence */
-		rtp->learning_probation--;
-		rtp->learning_max_seq = seq;
-		if (rtp->learning_probation == 0) {
-			probation = 0;
-		}
+		info->packets--;
 	} else {
-		rtp->learning_probation = learning_min_sequential - 1;
-		rtp->learning_max_seq = seq;
+		info->packets = learning_min_sequential - 1;
 	}
-
-	return probation;
+	info->max_seq = seq;
+	return (info->packets == 0);
 }
 
 static void rtp_add_candidates_to_ice(struct ast_rtp_instance *instance, struct ast_rtp *rtp, struct ast_sockaddr *addr, int port, int component,
@@ -1706,7 +1705,8 @@
 	rtp->seqno = ast_random() & 0xffff;
 	rtp->strict_rtp_state = (strictrtp ? STRICT_RTP_LEARN : STRICT_RTP_OPEN);
 	if (strictrtp) {
-		rtp_learning_seq_init(rtp, (uint16_t)rtp->seqno);
+		rtp_learning_seq_init(&rtp->rtp_source_learn, (uint16_t)rtp->seqno);
+		rtp_learning_seq_init(&rtp->alt_source_learn, (uint16_t)rtp->seqno);
 	}
 
 	/* Create a new socket for us to listen on and use */
@@ -3498,33 +3498,40 @@
 
 	/* If strict RTP protection is enabled see if we need to learn the remote address or if we need to drop the packet */
 	if (rtp->strict_rtp_state == STRICT_RTP_LEARN) {
-		ast_debug(1, "%p -- start learning mode pass with addr = %s\n", rtp, ast_sockaddr_stringify(&addr));
+		ast_debug(1, "%p -- start Probation learning mode pass with source address %s\n", rtp, ast_sockaddr_stringify(&addr));
 		/* For now, we always copy the address. */
 		ast_sockaddr_copy(&rtp->strict_rtp_address, &addr);
 
 		/* Send the rtp and the seqno from header to rtp_learning_rtp_seq_update to see whether we can exit or not*/
-		if (rtp_learning_rtp_seq_update(rtp, ntohl(rtpheader[0]))) {
-			ast_debug(1, "%p -- Condition for learning hasn't exited, so reject the frame.\n", rtp);
+		if (rtp_learning_rtp_seq_update(&rtp->rtp_source_learn, seqno)) {
+			ast_debug(1, "%p -- Probation at seq %d with %d to go; discarding frame\n", rtp, rtp->rtp_source_learn.max_seq, rtp->rtp_source_learn.packets);
+		        
 			return &ast_null_frame;
 		}
 
-		ast_debug(1, "%p -- Probation Ended. Set strict_rtp_state to STRICT_RTP_CLOSED with address %s\n", rtp, ast_sockaddr_stringify(&addr));
+		ast_verb(4, "%p -- Probation passed - setting RTP source address to %s\n", rtp, ast_sockaddr_stringify(&addr));
 		rtp->strict_rtp_state = STRICT_RTP_CLOSED;
-	} else if (rtp->strict_rtp_state == STRICT_RTP_CLOSED) {
+	} 
+	if (rtp->strict_rtp_state == STRICT_RTP_CLOSED) {
 		if (ast_sockaddr_cmp(&rtp->strict_rtp_address, &addr)) {
+			/* Always reset the alternate learning source */
+	 		rtp_learning_seq_init(&rtp->alt_source_learn, seqno);
+		} else {
 			/* Hmm, not the strict addres. Perhaps we're getting audio from the alternate? */
 			if (!ast_sockaddr_cmp(&rtp->alt_rtp_address, &addr)) {
 				/* ooh, we did! You're now the new expected address, son! */
-				ast_sockaddr_copy(&rtp->strict_rtp_address,
-						  &addr);
+				ast_sockaddr_copy(&rtp->strict_rtp_address, &addr);
 			} else  {
-				const char *real_addr = ast_strdupa(ast_sockaddr_stringify(&addr));
-				const char *expected_addr = ast_strdupa(ast_sockaddr_stringify(&rtp->strict_rtp_address));
-
-				ast_debug(1, "Received RTP packet from %s, dropping due to strict RTP protection. Expected it to be from %s\n",
-						real_addr, expected_addr);
-
-				return &ast_null_frame;
+				/* Start trying to learn from the new address. If we pass a probationary period with
+				 * it, that means we've stopped getting RTP from the original source and we should
+				 * switch to it
+				 */
+				if (rtp_learning_rtp_seq_update(&rtp->alt_source_learn, seqno)) {
+					ast_debug(1, "%p -- Received RTP packet from %s, dropping due to strict RTP protection. Will switch to it in %d packets\n", rtp, ast_sockaddr_stringify(&addr), rtp->alt_source_learn.packets);
+					return &ast_null_frame;
+				}
+				//ast_verb(4, "%p -- Switching RTP source address to %s\n", rtp, ast_sockaddr_stringify(&addr));
+				ast_sockaddr_copy(&rtp->strict_rtp_address, &addr);
 			}
 		}
 	}
@@ -3904,7 +3911,7 @@
 
 	if (strictrtp) {
 		rtp->strict_rtp_state = STRICT_RTP_LEARN;
-		rtp_learning_seq_init(rtp, rtp->seqno);
+		rtp_learning_seq_init(&rtp->rtp_source_learn, rtp->seqno);
 	}
 
 	return;
