diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-base-11.3.0/apps/app_confbridge.c asterisk-11.3.0/apps/app_confbridge.c
--- asterisk-base-11.3.0/apps/app_confbridge.c	2015-01-23 09:45:17.759958137 +0000
+++ asterisk-11.3.0/apps/app_confbridge.c	2015-01-23 10:46:07.415953493 +0000
@@ -424,7 +424,7 @@
 	} else {
       ast_str_set(filename, 0, "%s", rec_file);
 	}
-	ast_str_append(filename, 0, ",a");
+	//ast_str_append(filename, 0, ",a");
 }
 
 static void *record_thread(void *obj)
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-base-11.3.0/apps/app_wms.c asterisk-11.3.0/apps/app_wms.c
--- asterisk-base-11.3.0/apps/app_wms.c	2015-01-23 09:45:17.755954265 +0000
+++ asterisk-11.3.0/apps/app_wms.c	2015-01-23 10:30:53.779953489 +0000
@@ -443,6 +443,12 @@
       chan_vars->fax_thread = AST_PTHREADT_NULL;
    }
 
+   if(chan_vars->conf_thread != AST_PTHREADT_NULL)
+   {
+      pthread_join(chan_vars->conf_thread, NULL);
+      chan_vars->conf_thread = AST_PTHREADT_NULL;
+   }
+
    shutdown(trs_sock_fd, SHUT_RDWR);
 	close(trs_sock_fd);
 	trs_sock_fd = -1;
@@ -1096,69 +1102,10 @@
       //- Check Terminations ------------
       check_timeout_terminators(chan, chan_vars);
 
-//- Other checks --------------------------------------------------------------------------------------------------
-      //- do conference events ---------------------------------------------------------------------------------------
-      if (chan_vars->conference.id && ast_test_flag(ast_channel_inoflags(chan), MEETME_DO_PLAY))
-      {
-         reply_ast trs_reply;
-
-         //TODO: This should come in and AST_Text frame or another custom AST_FRAME
-         if (!strncmp(ast_channel_conf_playann(chan), "-1", 2)) //end of file
-         {
-//            ast_verbose(VERBOSE_PREFIX_3 "End of file on play_announcement on conference %d\n", chan_vars->conference.id);
-            memset(&trs_reply, 0, sizeof(trs_reply));
-	         trs_reply.cmd_cnt = chan_vars->conference.cmd_cnt;
-	         trs_reply.con_id = chan_vars->conference.con_id;
-	         trs_reply.sender = chan_vars->conference.edp_id;
-	         trs_reply.event = CONFERENCE_MANAGER_COMPLETED;
-            trs_reply.error = FALSE;
-            trs_reply.body.g_ret_value = 64; //CONF_PLAY
-            asteriskSendReply(&trs_reply, chan_vars);
-            ast_clear_flag(ast_channel_inoflags(chan), MEETME_DO_PLAY);
-         }
-         else if (!strncmp(ast_channel_conf_playann(chan), "-2", 2)) //error
-         {
-            ast_log(LOG_WARNING, "Error on play_announcement on conference %d\n", chan_vars->conference.id);
-            memset(&trs_reply, 0, sizeof(trs_reply));
-	         trs_reply.cmd_cnt = chan_vars->conference.cmd_cnt;
-	         trs_reply.con_id = chan_vars->conference.con_id;
-	         trs_reply.sender = chan_vars->conference.edp_id;
-	         trs_reply.event = CONFERENCE_MANAGER_COMPLETED;
-            trs_reply.error = TRUE;
-            trs_reply.body.error_value = RESOURCE_ERROR;
-            trs_reply.body.g_ret_value = 64; //CONF_PLAY
-            asteriskSendReply(&trs_reply, chan_vars);
-            ast_clear_flag(ast_channel_inoflags(chan), MEETME_DO_PLAY);
-         }
-      }
 	}
    //- END OF MAIN LOOP -------------------------------------------------------------------
    stop_action(chan, chan_vars);
 
-   //This must be here or else HANGUP will come before MeetMeLeave and channel: will have garbage
-   while (chan_vars->conference.id)
-   {
-      ++times;
-
-      if (chan_vars->conference.id) ast_set_flag(ast_channel_inoflags(chan), EXEC_APP_EXIT);
-
-      if (times == 100)  // 10 sec
-      {
-         if (option_verbose >= 3)
-            ast_verbose(VERBOSE_PREFIX_3 "Waited 10 secs for meetme to exit before hanging up\n");
-      }
-      if (times == 600) // 30 secs
-         ast_log(LOG_WARNING, "Waited 1 min for meetme to exit before hanging up\n");
-      if (times > 6000) // 600 secs
-      {         
-         ast_log(LOG_ERROR, "Waited 10 mins for meetme to exit before hanging up. Forcing hangup!\n");
-
-         kill_conference_thread(chan_vars);
-
-         break;
-      }
-      usleep(100000); // 100 milliseconds
-   }
 	if (chan_vars->asr.asr_writetrans) ast_translator_free_path(chan_vars->asr.asr_writetrans);
    if (chan_vars->asr.asr_sock > 0)
 	{
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-base-11.3.0/apps/wms_inoapi.c asterisk-11.3.0/apps/wms_inoapi.c
--- asterisk-base-11.3.0/apps/wms_inoapi.c	2015-01-23 09:45:17.763954294 +0000
+++ asterisk-11.3.0/apps/wms_inoapi.c	2015-01-23 10:30:53.799953884 +0000
@@ -614,13 +614,11 @@
 
          if (chan_vars->conf_thread != AST_PTHREADT_NULL)
          {
-            memset(&chan_vars->conference, 0, sizeof(chan_vars->conference));
             ast_log(LOG_WARNING, "Thread in use! Ignoring conference %d on ch %03d - %s\n", trs_cmd.al_int_val2, trs_cmd.ch_index, ast_channel_name(chan));
             goto error;
          }
          if (ast_pthread_create_background(&chan_vars->conf_thread, NULL, conference_thread, chan_vars) < 0)
          {
-            memset(&chan_vars->conference, 0, sizeof(chan_vars->conference));
             ast_log(LOG_WARNING, "Thread creation ERROR |%s| for conference %d on ch %03d - %s\n", strerror(errno), trs_cmd.al_int_val2, trs_cmd.ch_index, ast_channel_name(chan));
             goto error;
          }
@@ -825,7 +823,6 @@
          trs_reply.body.g_ret_value = USER_EXITED_CONFERENCE;
          asteriskSendReply(&trs_reply, chan_vars);
       }
-      memset(&chan_vars->conference, 0, sizeof(chan_vars->conference));
 	}
 	else // application doesn't exist
 	{
@@ -833,30 +830,12 @@
 	   trs_reply.error = TRUE;
 	   trs_reply.body.error_value = RESOURCE_ERROR;
 	   asteriskSendReply(&trs_reply, chan_vars);
-      memset(&chan_vars->conference, 0, sizeof(chan_vars->conference));
 	}
-	chan_vars->conf_thread = AST_PTHREADT_NULL;
 
    return NULL;
 }
 
 /******************************************************************************
- *        NAME: kill_conference_thread()
- * DESCRIPTION:
- *
- *****************************************************************************/
-void kill_conference_thread(ast_vars *chan_vars)
-{
-   if (chan_vars->conf_thread > AST_PTHREADT_NULL) {
-      while (pthread_kill(chan_vars->conf_thread, SIGURG) == 0)
-         sched_yield();
-      pthread_join(chan_vars->conf_thread, NULL);
-   }
-   chan_vars->conf_thread = AST_PTHREADT_STOP;
-}
-
-
-/******************************************************************************
  *        NAME: get_digits()
  * DESCRIPTION: 
  *              
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-base-11.3.0/main/bridging.c asterisk-11.3.0/main/bridging.c
--- asterisk-base-11.3.0/main/bridging.c	2015-01-23 09:45:53.071953700 +0000
+++ asterisk-11.3.0/main/bridging.c	2015-01-23 10:43:51.197587000 +0000
@@ -394,7 +394,7 @@
 	ast_debug(1, "Ending bridge thread for %p\n", bridge);
 
 	/* Indicate the bridge thread is no longer active */
-	bridge->thread = AST_PTHREADT_NULL;
+	//bridge->thread = AST_PTHREADT_NULL;
 	ao2_unlock(bridge);
 
 	ao2_ref(bridge, -1);
@@ -459,6 +459,15 @@
 	/* Last but not least clean up the features configuration */
 	ast_bridge_features_cleanup(&bridge->features);
 
+	if (bridge->thread != AST_PTHREADT_NULL) {
+		pthread_t thread = bridge->thread;
+		bridge->stop = 1;
+		bridge_poke(bridge);
+		ao2_unlock(bridge);
+		pthread_join(thread, NULL);
+		ao2_lock(bridge);
+	}
+
 	/* Drop the array of channels */
 	ast_free(bridge->array);
 
@@ -1266,6 +1275,12 @@
 		ao2_ref(bridge_channel->bridge, -1);
 		bridge_channel->bridge = NULL;
 	}
+
+    if(bridge_channel->thread != AST_PTHREADT_NULL) {
+       pthread_join(bridge_channel->thread, NULL);
+       bridge_channel->thread = AST_PTHREADT_NULL;
+    }
+
 	/* Destroy elements of the bridge channel structure and the bridge channel structure itself */
 	ast_cond_destroy(&bridge_channel->cond);
 }
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-base-11.3.0/main/channel.c asterisk-11.3.0/main/channel.c
--- asterisk-base-11.3.0/main/channel.c	2015-01-23 09:45:53.023959376 +0000
+++ asterisk-11.3.0/main/channel.c	2015-01-23 10:41:28.178692000 +0000
@@ -5956,6 +5956,7 @@
 
 	if (AST_RWLIST_RDLOCK(&backends)) {
 		ast_log(LOG_WARNING, "Unable to lock technology backend list\n");
+		ast_string_field_free_memory(mg);
 		return NULL;
 	}
 
@@ -5983,6 +5984,7 @@
 					ast_getformatname_multiple(tmp2, sizeof(tmp2), request_cap));
 				*cause = AST_CAUSE_BEARERCAPABILITY_NOTAVAIL;
 				AST_RWLIST_UNLOCK(&backends);
+				ast_string_field_free_memory(mg);
 				return NULL;
 			}
 		}
@@ -5993,6 +5995,7 @@
 		 * a better choice to send all the audio formats capable of being translated
 		 * during the request and allow the channel drivers to pick the best one. */
 		if (!(joint_cap = ast_format_cap_dup(request_cap))) {
+			ast_string_field_free_memory(mg);
 			return NULL;
 		}
 		ast_format_cap_remove_bytype(joint_cap, AST_FORMAT_TYPE_AUDIO);
@@ -6003,6 +6006,7 @@
       {
          if (!(c = chan->tech->_requester(type, joint_cap, requestor, addr, cause, mg))) {
             ast_format_cap_destroy(joint_cap);
+            ast_string_field_free_memory(mg);
             return NULL;
          }
       }
@@ -6010,11 +6014,13 @@
       {
          if (!(c = chan->tech->requester(type, joint_cap, requestor, addr, cause))) {
             ast_format_cap_destroy(joint_cap);
+            ast_string_field_free_memory(mg);
             return NULL;
          }
       }
       else
       {
+    	 ast_string_field_free_memory(mg);
          return NULL;
       }
 
@@ -6043,9 +6049,11 @@
 			ast_log(LOG_WARNING, "Setting security requirements failed\n");
 			c = ast_channel_release(c);
 			*cause = AST_CAUSE_BEARERCAPABILITY_NOTAVAIL;
+			ast_string_field_free_memory(mg);
 			return NULL;
 		}
 
+		ast_string_field_free_memory(mg);
 		/* no need to generate a Newchannel event here; it is done in the channel_alloc call */
 		return c;
 	}
@@ -6054,6 +6062,7 @@
 	*cause = AST_CAUSE_NOSUCHDRIVER;
 	AST_RWLIST_UNLOCK(&backends);
 
+	ast_string_field_free_memory(mg);
 	return NULL;
 }
 
