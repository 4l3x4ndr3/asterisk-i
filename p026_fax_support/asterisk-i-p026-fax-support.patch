diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-base-11.3.0/apps/app_wms.c asterisk-11.3.0/apps/app_wms.c
--- asterisk-base-11.3.0/apps/app_wms.c	2013-10-09 12:47:16.383637630 +0100
+++ asterisk-11.3.0/apps/app_wms.c	2013-10-21 13:34:19.115811000 +0100
@@ -583,6 +583,7 @@
    struct ast_frame *f;
    cmd_ast trs_cmd;
    int nbytes = 0;
+   int s_fax_tone_detected= 0;
 
    tempcs[0] = chan;
    numcs = 1;
@@ -635,6 +636,35 @@
          ast_indicate(chan, AST_CONTROL_PROGRESS);
          chan_vars->early_media = ast_tvnow();
       }
+
+      if (ast_test_flag(ast_channel_inoflags(chan), FAX_TONE_DETECTED))
+      {
+         if (option_verbose >= 3)
+            ast_verbose(VERBOSE_PREFIX_3 "Fax Tone detected on channel %s\n", ast_channel_name(chan));
+
+         s_fax_tone_detected = 1;
+
+         // Sending event UNSOLICITED_EVENT with USR_DEF_TONE_DETECTED
+
+         memset(&chan_vars->trs_reply, 0, sizeof(reply_ast));
+         chan_vars->trs_reply.con_id = trs_cmd.con_id;
+         chan_vars->trs_reply.cmd_cnt = trs_cmd.cmd_cnt;
+         chan_vars->trs_reply.sender = trs_cmd.edp_id;
+
+         chan_vars->trs_reply.error = FALSE;
+
+         chan_vars->trs_reply.event = UNSOLICITED_EVENT;
+         chan_vars->trs_reply.evt_type = USR_DEF_TONE_DETECTED;
+
+         chan_vars->trs_reply.body.g_ret_value = 150; //FAX CED Answer Tone (150)
+
+         asteriskSendReply(&chan_vars->trs_reply, chan_vars);
+
+         ast_channel_lock(chan);
+         ast_clear_flag(ast_channel_inoflags(chan), FAX_TONE_DETECTED);
+         ast_channel_unlock(chan);
+      }
+
       who = ast_waitfor_nandfds(tempcs, numcs, &chan_vars->trs_fd, 1, NULL, &data_available, &chan_vars->ms);
 		if (!who && (data_available < 0) && (chan_vars->ms)) 
       {
@@ -685,6 +715,8 @@
                case CONCAL: connect_call(chan, trs_cmd, chan_vars); break;
 					case ACCICA: accept_icall(chan, trs_cmd, chan_vars); break;
                case REJICA: reject_icall(chan, trs_cmd, chan_vars); break;                  
+               case SNDFAX: send_fax(chan, trs_cmd, chan_vars); break;
+               case RCVFAX: receive_fax(chan, trs_cmd, chan_vars); break;
                default: ast_log(LOG_ERROR, "Got unknown cmd_id %d\n", trs_cmd.cmd_id); break;
 				}
          }
@@ -859,6 +891,13 @@
             }
 				if (f) ast_frfree(f);
 			}
+         else if(s_fax_tone_detected == 1)
+         {
+            if (option_verbose >= 3)
+               ast_verbose(VERBOSE_PREFIX_3 "UNSOLICITED_EVENT with USR_DEF_TONE_DETECTED on channel %s\n", ast_channel_name(chan));
+
+            s_fax_tone_detected = 0;
+         }
 			else
 			{
             if (option_verbose >= 3)
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-base-11.3.0/apps/vsrvdefs.h asterisk-11.3.0/apps/vsrvdefs.h
--- asterisk-base-11.3.0/apps/vsrvdefs.h	2013-10-09 12:47:16.387637156 +0100
+++ asterisk-11.3.0/apps/vsrvdefs.h	2013-10-21 13:33:34.802077000 +0100
@@ -56,6 +56,16 @@
 /* Conference_event */
 #define USER_EXITED_CONFERENCE   0
 
+/* Fax Definitions */
+#define  FAX_FILENAME_SIZE    1024
+#define  FAX_COVERFNAME_SIZE  256
+#define  FAX_CSID_STR_SIZE    32
+#define  FAX_HEADER_STR_SIZE  132
+#define  FAX_MAXIO_FILES      10
+#define  FAX_HEADER_SHORT     0
+#define  FAX_HEADER_LONG      1
+#define  FAX_ERROR_MASK       0xD00 // Fax mask from SV_ERROR_MASK (see InoVox definition)
+
 /* Digit Streaming Definitions */
 #define STREAM_IGNORE      -1
 #define STREAM_STOP        0
@@ -229,6 +239,29 @@
    char trans_rec_fname[256];
 } ROUEND_PARAM;
 
+typedef struct
+{
+   char  fax_file[FAX_FILENAME_SIZE];     // file to send / receive
+   short source_type;                     // fax file type (0 - single file / 1 - list of files)
+   char  fn_cover[FAX_COVERFNAME_SIZE];   // cover filename to send
+   char  csid[FAX_CSID_STR_SIZE];         // Customer Subscriber Identification
+   char  header[FAX_HEADER_STR_SIZE];     // fax header to send
+   short header_type;                     // type of header to send (FAX_HEADER_SHORT or FAX_HEADER_LONG)
+   unsigned short max_baudrate;           // maximum transmission baud rate (2400 to 14400)
+}FAX_RES_PARAM;
+
+typedef struct
+{
+   int   event;      // event returned
+   int   chID;       // channel ID
+   int   status;     // status code of the operation (0 = OK)
+   int   pages;      // number of pages sent/received
+   int   speed;      // operation duration
+   int   resolution; // resolution of fax transmition
+   int   format;     // fax storage format
+   int   trsize;     // transfer size (bytes)
+}FAXREPLY;
+
 /* Termination conditions */
 typedef struct
 {
@@ -497,6 +530,7 @@
    char use_smra;
    SMRA_ATTRIB       smra_attrib;      // SMRA Attributes
    sdp_media sdp;
+   FAX_RES_PARAM fax_param;      // Fax parameters
 } cmd_ast;
 
 
@@ -526,6 +560,7 @@
       char              channelId[32];
       SMRA_ATTRIB       smra_attrib;      // SMRA Attributes
       sdp_media sdp;
+      FAXREPLY          fax_reply;
    } body;
 } reply_ast;
 // - LR - WARNING - LOOK OUT FOR SIZEOF(reply_ast) ...
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-base-11.3.0/apps/wms_inoapi.c asterisk-11.3.0/apps/wms_inoapi.c
--- asterisk-base-11.3.0/apps/wms_inoapi.c	2013-10-09 12:47:16.383637630 +0100
+++ asterisk-11.3.0/apps/wms_inoapi.c	2013-10-22 12:52:41.899531000 +0100
@@ -1409,8 +1409,265 @@
 }
 
 
+/******************************************************************************
+ *        NAME: send_fax()
+ * DESCRIPTION:
+ *
+ *****************************************************************************/
+void send_fax(struct ast_channel *chan, cmd_ast trs_cmd, ast_vars *chan_vars)
+{
+   struct ast_app *app; // AGI RELATED
+   char execCmd[FAX_FILENAME_SIZE+10];
+   reply_ast trs_reply;
+   char s_chid[256];
+   char s_maxbaudrate[20];
 
+   if (option_verbose >= 4)
+       ast_verbose(VERBOSE_PREFIX_4 "send_fax: Fax call operation %d on channel %s\n", trs_cmd.al_int_val1, ast_channel_name(chan));
 
+   if (chan == NULL)
+   {
+      ast_log(LOG_ERROR, "send_fax: Chan is NULL\n");
+      return;
+   }
+
+   if (!chan_vars->chan_id) chan_vars->chan_id = trs_cmd.ch_index; //channel id
+
+   snprintf(s_chid, sizeof(s_chid), "%d", trs_cmd.ch_index);
+
+   ast_channel_lock(chan);
+   pbx_builtin_setvar_helper(chan, "FAXCHINDEX", S_OR(s_chid, NULL));
+   pbx_builtin_setvar_helper(chan, "FAXCSID", S_OR(trs_cmd.fax_param.csid, NULL));
+   pbx_builtin_setvar_helper(chan, "FAXTRTOTALSIZE", NULL);
+   ast_channel_unlock(chan);
+
+   ast_clear_flag(ast_channel_inoflags(chan), EXEC_APP_EXIT);
+
+   if (chan == NULL)
+   {
+      ast_log(LOG_WARNING, "Chan is NULL\n");
+      return;
+   }
+
+   // ->$CSID->$HEADER->$FAX_FILE->$FAX_COVER->#HEADER_TYPE->#MAX_BAUD->
+   if ((app = pbx_findapp("SendFAX"))) // application found// AGI RELATED
+   {
+      if (option_verbose >= 3)
+         ast_verbose(VERBOSE_PREFIX_3 "SendFAX |%s| on channel %s\n", execCmd, ast_channel_name(chan));
+
+      if(trs_cmd.fax_param.fax_file)
+      {
+         snprintf(execCmd, sizeof(execCmd), "%s,dfzs", trs_cmd.fax_param.fax_file);
+
+         if(trs_cmd.fax_param.csid)
+         {
+            ast_func_write(chan, "FAXOPT(LocalStationID)", trs_cmd.fax_param.csid);
+         }
+
+         if (trs_cmd.fax_param.header)
+         {
+            ast_func_write(chan, "FAXOPT(headerinfo)", trs_cmd.fax_param.header);
+         }
+
+         if (trs_cmd.fax_param.max_baudrate)
+         {
+            sprintf(s_maxbaudrate, "%d",trs_cmd.fax_param.max_baudrate);
+            ast_func_write(chan, "FAXOPT(maxrate)", (const char *)s_maxbaudrate);
+         }
+
+         pbx_exec(chan, app, execCmd);
+
+         while(1)
+         {
+            if (ast_test_flag(ast_channel_inoflags(chan), EXEC_APP_EXIT))
+            {
+               memset(&trs_reply, 0, sizeof(trs_reply));
+               trs_reply.cmd_cnt = trs_cmd.cmd_cnt;
+               trs_reply.con_id = trs_cmd.con_id;
+               trs_reply.sender = trs_cmd.edp_id;
+               trs_reply.event = SEND_FAX_COMPLETED;
+               trs_reply.error = FALSE;
+
+               if (option_verbose >= 3)
+                  ast_verbose(VERBOSE_PREFIX_3 "send_fax: Exiting SendFax on channel %s\n", ast_channel_name(chan));
+
+               ast_channel_lock(chan);
+
+               if(strncmp(pbx_builtin_getvar_helper(chan, "FAXSTATUS"),"SUCCESS",7))
+                  trs_reply.body.fax_reply.status = -1; // FAILED
+               else
+                  trs_reply.body.fax_reply.status = 0; // SUCCESS
+
+               sscanf(pbx_builtin_getvar_helper(chan, "FAXBITRATE"),"%d",&trs_reply.body.fax_reply.speed);
+               sscanf(pbx_builtin_getvar_helper(chan, "FAXRESOLUTION"),"%d",&trs_reply.body.fax_reply.resolution);
+               sscanf(pbx_builtin_getvar_helper(chan, "FAXPAGES"),"%d",&trs_reply.body.fax_reply.pages);
+               sscanf(pbx_builtin_getvar_helper(chan, "FAXTRTOTALSIZE"),"%d",&trs_reply.body.fax_reply.trsize);
+
+               ast_channel_unlock(chan);
+
+               trs_reply.body.fax_reply.event = SEND_FAX_COMPLETED;      // event returned
+               trs_reply.body.fax_reply.chID = chan_vars->trs_reply.chan_id;       // channel ID
+               trs_reply.body.fax_reply.format = 1;     // fax storage format
+
+               asteriskSendReply(&trs_reply, chan_vars);
+
+               ast_clear_flag(ast_channel_inoflags(chan), EXEC_APP_EXIT);
+               break;
+            }
+
+            usleep(100000);
+         }
+      }
+      else  // error file missing
+      {
+         ast_log(LOG_WARNING, "send_fax: File missing on channel %s\n", ast_channel_name(chan));
+         trs_reply.cmd_cnt = trs_cmd.cmd_cnt;
+         trs_reply.con_id = trs_cmd.con_id;
+         trs_reply.sender = trs_cmd.edp_id;
+         trs_reply.error = TRUE;
+         trs_reply.body.error_value = FILE_NOT_FOUND;
+         asteriskSendReply(&trs_reply, chan_vars);
+      }
+   }
+   else // application doesn't exist
+   {
+      ast_log(LOG_WARNING, "send_fax: pbx_findapp failed on channel %s\n", ast_channel_name(chan));
+      trs_reply.cmd_cnt = trs_cmd.cmd_cnt;
+      trs_reply.con_id = trs_cmd.con_id;
+      trs_reply.sender = trs_cmd.edp_id;
+      trs_reply.error = TRUE;
+      trs_reply.body.error_value = RESOURCE_ERROR;
+      asteriskSendReply(&trs_reply, chan_vars);
+   }
+}
+
+
+/******************************************************************************
+ *        NAME: receive_fax()
+ * DESCRIPTION:
+ *
+ *****************************************************************************/
+void receive_fax(struct ast_channel *chan, cmd_ast trs_cmd, ast_vars *chan_vars)
+{
+   struct ast_app *app; // AGI RELATED
+   char execCmd[FAX_FILENAME_SIZE+10];
+   reply_ast trs_reply;
+   char s_chid[256];
+   char s_maxbaudrate[20];
+   int s_error = 0;
+
+   if (chan == NULL)
+   {
+      ast_log(LOG_ERROR, "receive_fax: Chan is NULL\n");
+      return;
+   }
+
+   if (!chan_vars->chan_id) chan_vars->chan_id = trs_cmd.ch_index;
+
+   snprintf(s_chid, sizeof(s_chid), "%d", trs_cmd.ch_index);
+
+   ast_channel_lock(chan);
+   pbx_builtin_setvar_helper(chan, "FAXCHINDEX", S_OR(s_chid, NULL));
+   pbx_builtin_setvar_helper(chan, "FAXCSID", S_OR(trs_cmd.fax_param.csid, NULL));
+   pbx_builtin_setvar_helper(chan, "FAXTRTOTALSIZE", NULL);
+   ast_channel_unlock(chan);
+
+   ast_clear_flag(ast_channel_inoflags(chan), EXEC_APP_EXIT);
+
+   // ->$FAX_FILE->$CSID->#MAX_BAUD->
+   if ((app = pbx_findapp("ReceiveFAX"))) // application found// AGI RELATED
+   {
+      if (option_verbose >= 3)
+         ast_verbose(VERBOSE_PREFIX_3 "ReceiveFax |%s| on channel %s\n", execCmd, ast_channel_name(chan));
+
+      if(trs_cmd.fax_param.fax_file)
+      {
+         snprintf(execCmd, sizeof(execCmd), "%s,dfzs", trs_cmd.fax_param.fax_file);
+
+         if(trs_cmd.fax_param.csid)
+         {
+            ast_func_write(chan, "FAXOPT(LocalStationID)", trs_cmd.fax_param.csid);
+         }
+
+         if (trs_cmd.fax_param.max_baudrate)
+         {
+            sprintf(s_maxbaudrate, "%d",trs_cmd.fax_param.max_baudrate);
+            ast_func_write(chan, "FAXOPT(maxrate)", (const char *)s_maxbaudrate);
+         }
+
+         pbx_exec(chan, app, execCmd);
+
+         while(1)
+         {
+            if (ast_test_flag(ast_channel_inoflags(chan), EXEC_APP_EXIT))
+            {
+               memset(&trs_reply, 0, sizeof(trs_reply));
+               trs_reply.cmd_cnt = trs_cmd.cmd_cnt;
+               trs_reply.con_id = trs_cmd.con_id;
+               trs_reply.sender = trs_cmd.edp_id;
+               trs_reply.event = RECEIVE_FAX_COMPLETED;
+               trs_reply.error = FALSE;
+
+               if (option_verbose >= 3)
+                  ast_verbose(VERBOSE_PREFIX_3 "Exiting ReceiveFax on channel %s\n", ast_channel_name(chan));
+
+               ast_channel_lock(chan);
+
+               if(strncmp(pbx_builtin_getvar_helper(chan, "FAXSTATUS"),"SUCCESS",7))
+               {
+                  sscanf(pbx_builtin_getvar_helper(chan, "FAXERROR"),"%d", &s_error);
+                  trs_reply.body.fax_reply.status = s_error + FAX_ERROR_MASK; // FAILED
+               }
+               else
+               {
+                  trs_reply.body.fax_reply.status = 0; // SUCCESS
+               }
+
+               sscanf(pbx_builtin_getvar_helper(chan, "FAXBITRATE"),"%d",&trs_reply.body.fax_reply.speed);
+               sscanf(pbx_builtin_getvar_helper(chan, "FAXRESOLUTION"),"%d",&trs_reply.body.fax_reply.resolution);
+               sscanf(pbx_builtin_getvar_helper(chan, "FAXPAGES"),"%d",&trs_reply.body.fax_reply.pages);
+               sscanf(pbx_builtin_getvar_helper(chan, "FAXTRTOTALSIZE"),"%d",&trs_reply.body.fax_reply.trsize);
+
+               ast_channel_unlock(chan);
+
+               trs_reply.body.fax_reply.event = RECEIVE_FAX_COMPLETED;      // event returned
+               trs_reply.body.fax_reply.chID = chan_vars->trs_reply.chan_id;       // channel ID
+               trs_reply.body.fax_reply.format = 1;     // fax storage format
+
+               asteriskSendReply(&trs_reply, chan_vars);
+
+               ast_clear_flag(ast_channel_inoflags(chan), EXEC_APP_EXIT);
+               break;
+            }
+
+            usleep(100000);
+         }
+      }
+      else // error file missing
+      {
+         ast_log(LOG_WARNING, "receive_fax: File missing on channel %s\n", ast_channel_name(chan));
+         memset(&trs_reply, 0, sizeof(trs_reply));
+         trs_reply.cmd_cnt = trs_cmd.cmd_cnt;
+         trs_reply.con_id = trs_cmd.con_id;
+         trs_reply.sender = trs_cmd.edp_id;
+         trs_reply.error = TRUE;
+         trs_reply.body.error_value = FILE_NOT_FOUND;
+         asteriskSendReply(&trs_reply, chan_vars);
+      }
+   }
+   else // application doesn't exist
+   {
+      ast_log(LOG_WARNING, "receive_fax: pbx_findapp failed on channel %s\n", ast_channel_name(chan));
+      memset(&trs_reply, 0, sizeof(trs_reply));
+      trs_reply.cmd_cnt = trs_cmd.cmd_cnt;
+      trs_reply.con_id = trs_cmd.con_id;
+      trs_reply.sender = trs_cmd.edp_id;
+      trs_reply.error = TRUE;
+      trs_reply.body.error_value = RESOURCE_ERROR;
+      asteriskSendReply(&trs_reply, chan_vars);
+   }
+
+}
 
 
 
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-base-11.3.0/apps/wms_inoapi.h asterisk-11.3.0/apps/wms_inoapi.h
--- asterisk-base-11.3.0/apps/wms_inoapi.h	2013-10-09 12:47:16.367637190 +0100
+++ asterisk-11.3.0/apps/wms_inoapi.h	2013-10-09 13:44:41.187545000 +0100
@@ -33,6 +33,8 @@
 void route_endpoint(struct ast_channel *chan, cmd_ast trs_cmd, ast_vars *chan_vars);
 void stop_operation(struct ast_channel *chan, cmd_ast trs_cmd, ast_vars *chan_vars);
 void conference_call(struct ast_channel *chan, cmd_ast trs_cmd, ast_vars *chan_vars);
+void send_fax(struct ast_channel *chan, cmd_ast trs_cmd, ast_vars *chan_vars);
+void receive_fax(struct ast_channel *chan, cmd_ast trs_cmd, ast_vars *chan_vars);
 
 //- Aux functions
 void kill_conference_thread(ast_vars *chan_vars);
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-base-11.3.0/channels/chan_sip.c asterisk-11.3.0/channels/chan_sip.c
--- asterisk-base-11.3.0/channels/chan_sip.c	2013-10-09 12:47:10.403637333 +0100
+++ asterisk-11.3.0/channels/chan_sip.c	2013-10-15 16:09:28.266682000 +0100
@@ -8839,22 +8839,8 @@
 			 */
 			sip_pvt_unlock(p);
 			ast_channel_unlock(ast);
-			if (ast_exists_extension(ast, target_context, "fax", 1,
-				S_COR(ast_channel_caller(ast)->id.number.valid, ast_channel_caller(ast)->id.number.str, NULL))) {
-				ast_channel_lock(ast);
-				sip_pvt_lock(p);
-				ast_verb(2, "Redirecting '%s' to fax extension due to CNG detection\n", ast_channel_name(ast));
-				pbx_builtin_setvar_helper(ast, "FAXEXTEN", ast_channel_exten(ast));
-				if (ast_async_goto(ast, target_context, "fax", 1)) {
-					ast_log(LOG_NOTICE, "Failed to async goto '%s' into fax of '%s'\n", ast_channel_name(ast), target_context);
-				}
-				ast_frfree(fr);
-				fr = &ast_null_frame;
-			} else {
-				ast_channel_lock(ast);
-				sip_pvt_lock(p);
-				ast_log(LOG_NOTICE, "FAX CNG detected but no fax extension\n");
-			}
+			ast_verb(2, "Fax CNG detection on channel '%s'\n", ast_channel_name(ast));
+			ast_set_flag(ast_channel_inoflags(p->owner), FAX_TONE_DETECTED);
 		}
 	}
 
@@ -11117,18 +11103,11 @@
 				if (ast_test_flag(&p->flags[1], SIP_PAGE2_FAX_DETECT_T38)) {
 					ast_channel_lock(p->owner);
 					if (strcmp(ast_channel_exten(p->owner), "fax")) {
-						const char *target_context = S_OR(ast_channel_macrocontext(p->owner), ast_channel_context(p->owner));
-						ast_channel_unlock(p->owner);
-						if (ast_exists_extension(p->owner, target_context, "fax", 1,
-							S_COR(ast_channel_caller(p->owner)->id.number.valid, ast_channel_caller(p->owner)->id.number.str, NULL))) {
-							ast_verb(2, "Redirecting '%s' to fax extension due to peer T.38 re-INVITE\n", ast_channel_name(p->owner));
-							pbx_builtin_setvar_helper(p->owner, "FAXEXTEN", ast_channel_exten(p->owner));
-							if (ast_async_goto(p->owner, target_context, "fax", 1)) {
-								ast_log(LOG_NOTICE, "Failed to async goto '%s' into fax of '%s'\n", ast_channel_name(p->owner), target_context);
-							}
-						} else {
-							ast_log(LOG_NOTICE, "T.38 re-INVITE detected but no fax extension\n");
-						}
+					   ast_verb(2, "Fax T.38 detection on channel '%s'\n", ast_channel_name(p->owner));
+
+					   ast_set_flag(ast_channel_inoflags(p->owner), FAX_TONE_DETECTED);
+					   ast_channel_unlock(p->owner);
+
 					} else {
 						ast_channel_unlock(p->owner);
 					}
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-base-11.3.0/include/asterisk/channel.h asterisk-11.3.0/include/asterisk/channel.h
--- asterisk-base-11.3.0/include/asterisk/channel.h	2013-10-09 12:47:14.351637213 +0100
+++ asterisk-11.3.0/include/asterisk/channel.h	2013-10-15 16:00:04.576220000 +0100
@@ -186,6 +186,8 @@
 #define MEETME_KICK_LAST      (1 << 12)
 #define MEETME_DO_RECORD      (1 << 13)
 
+#define FAX_TONE_DETECTED     (1 << 14)
+
 #define EXEC_APP_EXIT         (1 << 17)
 #define SIP_GOT_REINVITE      (1 << 18)
 
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-base-11.3.0/include/asterisk/res_fax.h asterisk-11.3.0/include/asterisk/res_fax.h
--- asterisk-base-11.3.0/include/asterisk/res_fax.h	2013-10-09 12:47:13.939637276 +0100
+++ asterisk-11.3.0/include/asterisk/res_fax.h	2013-10-22 09:44:17.334720000 +0100
@@ -141,6 +141,8 @@
 	);
 	/*! the number of pages sent/received during a fax session */
 	unsigned int pages_transferred;
+	/*! total size transferred during a fax session */
+	unsigned int total_size;
 	/*! session details flags for options */
 	union {
 		/*! dontuse dummy variable - do not ever use */	
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-base-11.3.0/res/res_fax.c asterisk-11.3.0/res/res_fax.c
--- asterisk-base-11.3.0/res/res_fax.c	2013-10-09 12:47:44.351637250 +0100
+++ asterisk-11.3.0/res/res_fax.c	2013-10-22 11:16:30.534017000 +0100
@@ -1084,9 +1084,17 @@
 
 static void get_manager_event_info(struct ast_channel *chan, struct manager_event_info *info)
 {
-	pbx_substitute_variables_helper(chan, "${CONTEXT}", info->context, sizeof(info->context));
+   const char *s_csid;
+   ast_channel_lock(chan);
+   if ((s_csid = pbx_builtin_getvar_helper(chan, "FAXCSID")))
+   {
+      s_csid = ast_strdupa(s_csid);
+      pbx_substitute_variables_helper(chan, s_csid, info->cid, sizeof(info->cid));
+   }
+
+   pbx_substitute_variables_helper(chan, "${CONTEXT}", info->context, sizeof(info->context));
 	pbx_substitute_variables_helper(chan, "${EXTEN}", info->exten, sizeof(info->exten));
-	pbx_substitute_variables_helper(chan, "${CALLERID(num)}", info->cid, sizeof(info->cid));
+	ast_channel_unlock(chan);
 }
 
 
@@ -1141,13 +1149,19 @@
 static int report_fax_status(struct ast_channel *chan, struct ast_fax_session_details *details, const char *status)
 {
 	char *filenames = generate_filenames_string(details, "FileName: ", "\r\n");
-
+	const char *s_chid;
 	ast_channel_lock(chan);
 	if (details->option.statusevents) {
 		struct manager_event_info info;
 
-		get_manager_event_info(chan, &info);
-		manager_event(EVENT_FLAG_CALL,
+	   if ((s_chid = pbx_builtin_getvar_helper(chan, "FAXCHINDEX"))) {
+	      s_chid = ast_strdupa(s_chid);
+	   }
+
+	   get_manager_event_info(chan, &info);
+	   if(!s_chid == NULL)
+	   {
+	      manager_event(EVENT_FLAG_CALL,
 			      "FAXStatus",
 			      "Operation: %s\r\n"
 			      "Status: %s\r\n"
@@ -1156,7 +1170,8 @@
 			      "Exten: %s\r\n"
 			      "CallerID: %s\r\n"
 			      "LocalStationID: %s\r\n"
-			      "%s%s",
+			      "%s%s"
+			      "chid: %s\r\n",
 			      (details->caps & AST_FAX_TECH_GATEWAY) ? "gateway" : (details->caps & AST_FAX_TECH_RECEIVE) ? "receive" : "send",
 			      status,
 			      ast_channel_name(chan),
@@ -1165,7 +1180,9 @@
 			      info.cid,
 			      details->localstationid,
 			      S_OR(filenames, ""),
-			      filenames ? "\r\n" : "");
+			      filenames ? "\r\n" : "",
+			      s_chid);
+	   }
 	}
 	ast_channel_unlock(chan);
 
@@ -1745,6 +1762,7 @@
 	struct ast_flags opts = { 0, };
 	struct manager_event_info info;
 	enum ast_t38_state t38state;
+	const char *s_chid;
 
 	/* initialize output channel variables */
 	pbx_builtin_setvar_helper(chan, "FAXSTATUS", "FAILED");
@@ -1942,8 +1960,14 @@
 	/* send out the AMI completion event */
 	ast_channel_lock(chan);
 
+   if ((s_chid = pbx_builtin_getvar_helper(s->chan, "FAXCHINDEX"))) {
+      s_chid = ast_strdupa(s_chid);
+   }
+
 	get_manager_event_info(chan, &info);
-	manager_event(EVENT_FLAG_CALL,
+	if(!s_chid == NULL)
+   {
+	   manager_event(EVENT_FLAG_CALL,
 		      "ReceiveFAX",
 		      "Channel: %s\r\n"
 		      "Context: %s\r\n"
@@ -1954,7 +1978,8 @@
 		      "PagesTransferred: %s\r\n"
 		      "Resolution: %s\r\n"
 		      "TransferRate: %s\r\n"
-		      "FileName: %s\r\n",
+		      "%s\r\n"
+		      "chid: %s\r\n",
 		      ast_channel_name(chan),
 		      info.context,
 		      info.exten,
@@ -1964,7 +1989,9 @@
 		      S_OR(pbx_builtin_getvar_helper(chan, "FAXPAGES"), ""),
 		      S_OR(pbx_builtin_getvar_helper(chan, "FAXRESOLUTION"), ""),
 		      S_OR(pbx_builtin_getvar_helper(chan, "FAXBITRATE"), ""),
-		      args.filename);
+		      args.filename,
+		      s_chid);
+   }
 	ast_channel_unlock(chan);
 
 	ao2_ref(s, -1);
@@ -2231,6 +2258,7 @@
 	struct ast_flags opts = { 0, };
 	struct manager_event_info info;
 	enum ast_t38_state t38state;
+   const char *s_chid;
 
 	/* initialize output channel variables */
 	pbx_builtin_setvar_helper(chan, "FAXSTATUS", "FAILED");
@@ -2458,8 +2486,15 @@
 
 	/* send out the AMI completion event */
 	ast_channel_lock(chan);
+
+   if ((s_chid = pbx_builtin_getvar_helper(s->chan, "FAXCHINDEX"))) {
+      s_chid = ast_strdupa(s_chid);
+   }
+
 	get_manager_event_info(chan, &info);
-	manager_event(EVENT_FLAG_CALL,
+	if(!s_chid == NULL)
+	{
+	   manager_event(EVENT_FLAG_CALL,
 		      "SendFAX",
 		      "Channel: %s\r\n"
 		      "Context: %s\r\n"
@@ -2470,7 +2505,8 @@
 		      "PagesTransferred: %s\r\n"
 		      "Resolution: %s\r\n"
 		      "TransferRate: %s\r\n"
-		      "%s\r\n",
+		      "%s\r\n"
+		      "chid: %s\r\n",
 		      ast_channel_name(chan),
 		      info.context,
 		      info.exten,
@@ -2480,7 +2516,9 @@
 		      S_OR(pbx_builtin_getvar_helper(chan, "FAXPAGES"), ""),
 		      S_OR(pbx_builtin_getvar_helper(chan, "FAXRESOLUTION"), ""),
 		      S_OR(pbx_builtin_getvar_helper(chan, "FAXBITRATE"), ""),
-		      filenames);
+		      filenames,
+		      s_chid);
+	}
 	ast_channel_unlock(chan);
 
 	ast_free(filenames);
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-base-11.3.0/res/res_fax_spandsp.c asterisk-11.3.0/res/res_fax_spandsp.c
--- asterisk-base-11.3.0/res/res_fax_spandsp.c	2013-10-09 12:47:44.427637108 +0100
+++ asterisk-11.3.0/res/res_fax_spandsp.c	2013-10-22 11:18:49.891492000 +0100
@@ -66,6 +66,9 @@
 #include "asterisk/res_fax.h"
 #include "asterisk/channel.h"
 
+#include "asterisk/manager.h"
+#include "asterisk/pbx.h"
+
 #define SPANDSP_FAX_SAMPLES 160
 #define SPANDSP_FAX_TIMER_RATE 8000 / SPANDSP_FAX_SAMPLES	/* 50 ticks per second, 20ms, 160 samples per second */
 #define SPANDSP_ENGAGE_UDPTL_NAT_RETRY 3
@@ -163,6 +166,8 @@
 static int spandsp_v21_new(struct spandsp_pvt *p);
 static void session_destroy(struct spandsp_pvt *p);
 static int t38_tx_packet_handler(t38_core_state_t *t38_core_state, void *data, const uint8_t *buf, int len, int count);
+static void t30_phase_b_handler(t30_state_t *t30_state, void *data, int completion_code);
+static void t30_phase_d_handler(t30_state_t *t30_state, void *data, int completion_code);
 static void t30_phase_e_handler(t30_state_t *t30_state, void *data, int completion_code);
 static void spandsp_log(int level, const char *msg);
 static int update_stats(struct spandsp_pvt *p, int completion_code);
@@ -346,6 +351,125 @@
 	return 0;
 }
 
+static void t30_phase_b_handler(t30_state_t *t30_state, void *data, int completion_code)
+{
+   struct ast_fax_session *s = data;
+   const char *c, *s_chid;
+
+   // 131 is the spandsp ok completion code for phase b when receiving
+   // 128 is the spandsp ok completion code for phase b when sending
+   if (completion_code == T30_ERR_OK || completion_code == 131 || completion_code == 128) {
+      ast_string_field_set(s->details, resultstr, "");
+   } else {
+      ast_string_field_set(s->details, resultstr, t30_completion_code_to_str(completion_code));
+   }
+
+   ast_verb(3, "FAX Phase B in Channel '%s' with result: %d (%s)\n", ast_channel_name(s->chan), completion_code, s->details->resultstr);
+
+   if ((c = t30_get_tx_ident(t30_state))) {
+      ast_string_field_set(s->details, localstationid, c);
+   }
+
+   if ((c = t30_get_rx_ident(t30_state))) {
+      ast_string_field_set(s->details, remotestationid, c);
+   }
+
+   ast_channel_lock(s->chan);
+   if ((s_chid = pbx_builtin_getvar_helper(s->chan, "FAXCHINDEX"))) {
+      s_chid = ast_strdupa(s_chid);
+   }
+   ast_channel_unlock(s->chan);
+   if(!s_chid == NULL)
+   {
+      manager_event(EVENT_FLAG_CALL,
+                       "FaxPhaseB",
+                       "Operation: %s\r\n"
+                       "RemoteStationID: %s\r\n"
+                       "LocalStationID: %s\r\n"
+                       "Channel: %s\r\n"
+                       "Maxrate: %d\r\n"
+                       "CompletionCode: %d\r\n"
+                       "ResultStr: %s\r\n"
+                       "chid: %s\r\n",
+                       (s->details->caps & AST_FAX_TECH_GATEWAY) ? "gateway" : (s->details->caps & AST_FAX_TECH_RECEIVE) ? "receive" : "send",
+                       s->details->remotestationid,
+                       s->details->localstationid,
+                       ast_channel_name(s->chan),
+                       s->details->maxrate,
+                       completion_code,
+                       s->details->resultstr,
+                       s_chid
+                       );
+   }
+
+}
+
+static void t30_phase_d_handler(t30_state_t *t30_state, void *data, int completion_code)
+{
+   struct ast_fax_session *s = data;
+   t30_stats_t stats;
+   const char *s_chid;
+   unsigned int s_total_size;
+   t30_get_transfer_statistics(t30_state, &stats);
+
+   // 78 is the spandps ok completion code for phase d when receiving
+   // 140 is the spandps ok completion code for phase d when sending
+   if (completion_code == T30_ERR_OK || completion_code == 78 || completion_code == 140) {
+      ast_string_field_set(s->details, resultstr, "");
+   } else {
+      ast_string_field_set(s->details, resultstr, t30_completion_code_to_str(completion_code));
+   }
+   ast_verb(3, "FAX Phase D in Channel '%s' with result: %d (%s)\n", ast_channel_name(s->chan), completion_code, s->details->resultstr);
+
+#if SPANDSP_RELEASE_DATE >= 20090220
+   s->details->pages_transferred = (s->details->caps & AST_FAX_TECH_RECEIVE) ? stats.pages_rx : stats.pages_tx;
+#else
+   s->details->pages_transferred = stats.pages_transferred;
+#endif
+
+   ast_string_field_build(s->details, transfer_rate, "%d", stats.bit_rate);
+   ast_string_field_build(s->details, resolution, "%.0f", ceil(stats.y_resolution*0.0254)); // meter to inch
+
+   ast_channel_lock(s->chan);
+   if((s_chid = pbx_builtin_getvar_helper(s->chan, "FAXCHINDEX"))) {
+      s_chid = ast_strdupa(s_chid);
+   }
+   ast_channel_unlock(s->chan);
+
+   s->details->total_size = s->details->total_size + stats.image_size;
+
+   sprintf(s_total_size, "%d",s->details->total_size);
+   pbx_builtin_setvar_helper(s->chan, "FAXTRTOTALSIZE", s_total_size);
+
+   if(!s_chid == NULL)
+   {
+      manager_event(EVENT_FLAG_CALL,
+                      "FaxPhaseD",
+                      "Operation: %s\r\n"
+                      "Channel: %s\r\n"
+                      "PagesTransferred: %d\r\n"
+                      "TransferRate: %s\r\n"
+                      "Resolution: %s\r\n"
+                      "Width: %d\r\n"
+                      "ImageSize: %d\r\n"
+                      "CompletionCode: %d\r\n"
+                      "ResultStr: %s\r\n"
+                      "chid: %s\r\n",
+                      (s->details->caps & AST_FAX_TECH_GATEWAY) ? "gateway" : (s->details->caps & AST_FAX_TECH_RECEIVE) ? "receive" : "send",
+                      ast_channel_name(s->chan),
+                      s->details->pages_transferred,
+                      s->details->transfer_rate,
+                      s->details->resolution,
+                      stats.width,
+                      stats.image_size,
+                      completion_code,
+                      s->details->resultstr,
+                      s_chid
+                      );
+   }
+
+}
+
 /*! \brief Phase E handler callback.
  * \param t30_state the span t30 state
  * \param data this will be the ast_fax_session
@@ -361,8 +485,9 @@
 	char headerinfo[T30_MAX_PAGE_HEADER_INFO + 1];
 	const char *c;
 	t30_stats_t stats;
+	const char *s_chid, *s_pages, *s_size;
 
-	ast_debug(5, "FAX session '%d' entering phase E\n", s->id);
+	ast_verb(3, "FAX session entering phase E\n");
 
 	p->isdone = 1;
 
@@ -372,14 +497,15 @@
 
 	if (completion_code == T30_ERR_OK) {
 		ast_string_field_set(s->details, result, "SUCCESS");
+      ast_string_field_set(s->details, error, "");
+      ast_string_field_set(s->details, resultstr, "");
 	} else {
 		ast_string_field_set(s->details, result, "FAILED");
 		ast_string_field_set(s->details, error, t30_completion_code_to_str(completion_code));
+	   ast_string_field_set(s->details, resultstr, t30_completion_code_to_str(completion_code));
 	}
 
-	ast_string_field_set(s->details, resultstr, t30_completion_code_to_str(completion_code));
-
-	ast_debug(5, "FAX session '%d' completed with result: %s (%s)\n", s->id, s->details->result, s->details->resultstr);
+	ast_verb(3, "FAX Phase E in Channel %s completed with result: %s (%s)\n", ast_channel_name(s->chan), s->details->result, s->details->resultstr);
 
 	if ((c = t30_get_tx_ident(t30_state))) {
 		ast_string_field_set(s->details, localstationid, c);
@@ -396,11 +522,58 @@
 #endif
 
 	ast_string_field_build(s->details, transfer_rate, "%d", stats.bit_rate);
-
-	ast_string_field_build(s->details, resolution, "%dx%d", stats.x_resolution, stats.y_resolution);
+	ast_string_field_build(s->details, resolution, "%.0f", ceil(stats.y_resolution*0.0254)); // meter to inch
 
 	t30_get_tx_page_header_info(t30_state, headerinfo);
 	ast_string_field_set(s->details, headerinfo, headerinfo);
+
+	ast_channel_lock(s->chan);
+   if ((s_chid = pbx_builtin_getvar_helper(s->chan, "FAXCHINDEX"))) {
+      s_chid = ast_strdupa(s_chid);
+   }
+   ast_channel_unlock(s->chan);
+
+   pbx_builtin_setvar_helper(s->chan, "FAXERROR", s->details->error);
+   pbx_builtin_setvar_helper(s->chan, "FAXBITRATE", s->details->transfer_rate);
+   pbx_builtin_setvar_helper(s->chan, "FAXRESOLUTION", s->details->resolution);
+   sprintf(s_pages, "%d",s->details->pages_transferred);
+   pbx_builtin_setvar_helper(s->chan, "FAXPAGES", s_pages);
+   sprintf(s_size, "%d",stats.image_size);
+   pbx_builtin_setvar_helper(s->chan, "FAXTRSIZE", s_size);
+
+   if(!s_chid == NULL)
+   {
+      manager_event(EVENT_FLAG_CALL,
+                       "FaxPhaseE",
+                       "Operation: %s\r\n"
+                       "Channel: %s\r\n"
+                       "RemoteStationID: %s\r\n"
+                       "LocalStationID: %s\r\n"
+                       "HeaderInfo: %s\r\n"
+                       "PagesTransferred: %d\r\n"
+                       "TransferRate: %s\r\n"
+                       "Resolution: %s\r\n"
+                       "Width: %d\r\n"
+                       "TotalImageSize: %d\r\n"
+                       "CompletionCode: %d\r\n"
+                       "ResultStr: %s\r\n"
+                       "chid: %s\r\n",
+                       (s->details->caps & AST_FAX_TECH_GATEWAY) ? "gateway" : (s->details->caps & AST_FAX_TECH_RECEIVE) ? "receive" : "send",
+                       ast_channel_name(s->chan),
+                       s->details->remotestationid,
+                       s->details->localstationid,
+                       s->details->headerinfo,
+                       s->details->pages_transferred,
+                       s->details->transfer_rate,
+                       s->details->resolution,
+                       stats.width,
+                       s->details->total_size,
+                       completion_code,
+                       s->details->resultstr,
+                       s_chid
+                       );
+   }
+   ast_set_flag(ast_channel_inoflags(s->chan), EXEC_APP_EXIT);
 }
 
 /*! \brief Send spandsp log messages to asterisk.
@@ -911,6 +1084,10 @@
 
 	/* perhaps set_transmit_on_idle() should be called */
 
+   t30_set_phase_b_handler(p->t30_state, t30_phase_b_handler, s);
+
+   t30_set_phase_d_handler(p->t30_state, t30_phase_d_handler, s);
+
 	t30_set_phase_e_handler(p->t30_state, t30_phase_e_handler, s);
 
 	/* set T.38 parameters */
