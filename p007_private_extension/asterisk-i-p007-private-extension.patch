diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-11.3.0.p006/channels/chan_sip.c asterisk-11.3.0/channels/chan_sip.c
--- asterisk-11.3.0.p006/channels/chan_sip.c	2013-05-17 10:23:20.536938578 +0100
+++ asterisk-11.3.0/channels/chan_sip.c	2013-05-17 15:22:04.890975000 +0100
@@ -16,6 +16,44 @@
  * at the top of the source tree.
  */
 
+/*
+ * Changed by Luis Reis - PT Inovação, SA
+ *
+ *    Added support for:
+ *
+ * RFC 3325 - Private Extensions to the Session Initiation Protocol (SIP) for Asserted Identity within Trusted Networks
+ * RFC 3455 - Private Header (P-Header) Extensions to the Session Initiation Protocol (SIP) for the 3rd-Generation Partnership Project (3GPP)
+ * RFC 2806 - URLs for Telephone Calls
+ * Support Surf Hardware (external media)
+ * Support for mscml, msmo/msml
+ * Support for different network interfaces for media and signalling
+ *
+ *
+ * Fixed:
+ *
+ * RTP streams with different ip's failed
+ * .vox files are considered PCM A-law. format_vox was removed
+ * application/mixed contents fixed if Content-Len was not the last header
+ *
+ * Other fixes:
+ *
+ */
+
+/*
+ *
+ * Useful commands:
+ *
+ * nohup tcpdump port 5060 -s 0 -w ipwindless_08-06-10_1.cap -i eth1 > /dev/null &
+ *
+ * valgrind --tool=memcheck --leak-check=full /usr/sbin/asterisk -vvvgdc
+ *
+ * strace -p <pid>
+ *
+ * gdb <bin>; attach <pid>
+ *
+ */
+
+
 /*!
  * \file
  * \brief Implementation of Session Initiation Protocol
@@ -1676,6 +1714,16 @@
 static int sip_set_udptl_peer(struct ast_channel *chan, struct ast_udptl *udptl);
 static void change_t38_state(struct sip_pvt *p, int state);
 
+/*------ IMS Support --------- */
+static int get_p_called_party_id(struct sip_pvt *p, struct sip_request *oreq);
+static int get_p_asserted_id(struct sip_pvt *p, struct sip_request *oreq);
+static int get_p_preferred_id(struct sip_pvt *p, struct sip_request *oreq);
+static int get_p_privacy_id(struct sip_pvt *p, struct sip_request *oreq);
+static int get_to(struct sip_pvt *p, struct sip_request *oreq);
+static int get_headers(struct sip_pvt *p, struct sip_request *oreq);
+static void set_destination_from_via(struct sip_pvt *p, struct sip_request *req, char *via);
+static void create_route(struct sip_pvt *p, char *rr, int backwards);
+
 /*------ Session-Timers functions --------- */
 static void proc_422_rsp(struct sip_pvt *p, struct sip_request *rsp);
 static int  proc_session_timer(const void *vp);
@@ -8065,6 +8113,60 @@
 
 	ast_channel_tech_pvt_set(tmp, dialog_ref(i, "sip_new: set chan->tech_pvt to i"));
 
+	ast_channel_url_params_set(tmp, i->url_params); // sip_extended_params support
+	ast_channel_extradata_set(tmp, i->ic_extra_data); // ic_extradata
+
+	if (!ast_strlen_zero(i->short_p_asserted_id))
+	   ast_channel_cid_asserted_id_set(tmp, i->short_p_asserted_id);
+
+	if(!ast_strlen_zero(i->p_privacy_id))
+	   ast_channel_cid_privacy_set(tmp, i->p_privacy_id);
+
+	//From: - from
+	if (!ast_strlen_zero(i->from))
+	{
+	   if (strncmp(i->from, "sip:", 4) == 0 || strncmp(i->from, "tel:", 4) == 0)
+	      ast_channel_cid_ani_set(tmp, i->from + 4);
+	   else if (strncmp(i->from, "sips:", 5) == 0)
+	      ast_channel_cid_ani_set(tmp, i->from + 5);
+	   else ast_channel_cid_ani_set(tmp, i->from + 5);
+	}
+	//Contact:
+	else if (!ast_strlen_zero(i->uri))
+	{
+	   if (strncmp(i->uri, "sip:", 4) == 0 || strncmp(i->uri, "tel:", 4) == 0)
+	      ast_channel_cid_ani_set(tmp, i->from + 4);
+	   else if (strncmp(i->uri, "sips:", 5) == 0)
+	      ast_channel_cid_ani_set(tmp, i->from + 5);
+	   else ast_channel_cid_ani_set(tmp, i->from);
+	}
+
+	//Request URI
+	if (i->initreq.headers) {
+	   const char *request_uri = REQ_OFFSET_TO_STR(&i->initreq, rlpart2);
+	   if (!ast_strlen_zero(request_uri))
+	   {
+	      if (strncmp(request_uri, "sip:", 4) == 0 || strncmp(request_uri, "tel:", 4) == 0)
+	         ast_channel_cid_uri_set(tmp, request_uri + 4);
+	      else if (strncmp(request_uri, "sips:", 5) == 0)
+	         ast_channel_cid_uri_set(tmp, request_uri + 5);
+	      else ast_channel_cid_uri_set(tmp, request_uri);
+	   }
+	}
+	//To
+	if (!ast_strlen_zero(i->to))
+	{
+	   if (strncmp(i->to, "sip:", 4) == 0 || strncmp(i->to, "tel:", 4) == 0)
+	      ast_channel_cid_dnis_set(tmp, i->to + 4);
+	   else if (strncmp(i->to, "sips:", 5) == 0)
+	      ast_channel_cid_dnis_set(tmp, i->to + 5);
+	   else ast_channel_cid_dnis_set(tmp, i->to);
+	}
+
+	ast_channel_cid_callid_set(tmp, i->callid);
+	ast_channel_jointcapability_set(tmp, i->jointcaps);
+	ast_channel_defhangcause_set(tmp, global_defhangcause);
+
 	if (ast_opt_use_smra) // DSP Media
 	{
 	   // SMRA Stuff
@@ -12014,6 +12116,16 @@
 		add_header(req, "Min-SE", se_hdr);
 	}
 
+	if (!ast_strlen_zero(p->p_asserted_id))
+	   add_header(req, "P-Asserted-Identity", p->p_asserted_id);
+	if(!ast_strlen_zero(p->p_called_party_id))
+	   add_header(req, "P-Called-Party-ID", p->p_called_party_id);
+	if (!ast_strlen_zero(p->p_preferred_id))
+	   add_header(req, "P-Preferred-Identity", p->p_preferred_id);
+	if(!ast_strlen_zero(p->p_privacy_id))
+	   add_header(req, "Privacy", p->p_privacy_id);
+
+
 	return 0;
 }
 
@@ -13846,7 +13958,7 @@
 	int cid_has_num = 1;
 	struct ast_party_id connected_id;
 
-	//int extra_headers = 0, i;
+	int extra_headers = 0, i;
 	char header_name[10][128];
 	char header_field[10][256];
 
@@ -14025,7 +14137,10 @@
 	}
 
 	/* If custom URI options have been provided, append them */
-	if (p->options && !ast_strlen_zero(p->options->uri_options))
+	// To send ;user=phone on the end
+	if (!ast_strlen_zero(p->url_params))
+	   ast_str_append(&invite, 0, ";%s", p->url_params);
+	else if (p->options && !ast_strlen_zero(p->options->uri_options))
 		ast_str_append(&invite, 0, ";%s", p->options->uri_options);
 	
  	/* This is the request URI, which is the next hop of the call
@@ -14053,6 +14168,137 @@
 		}
  	}
 
+ 	ast_string_field_set(p, p_asserted_id, asserted_id);
+
+ 	//- INVITE HEADERS --
+ 	if (sipmethod == SIP_INVITE)
+ 	{
+ 	   if (p->owner)
+ 	   {
+ 	      char datacheck[2048]; //sizeof(extradata)
+ 	      char *strpos, *a, *strstart;
+
+ 	      //ast_log(LOG_NOTICE, "Channel extradata [%s]\n", p->owner->extradata);
+
+ 	      memset(datacheck, 0, sizeof(datacheck));
+ 	      strncpy(datacheck, ast_channel_extradata(p->owner), sizeof(datacheck));
+
+ 	      strpos = datacheck;
+
+ 	      while(*strpos != '\0')
+ 	      {
+ 	         if ((a = strchr(strpos, 29)) != NULL) *a = '\0';
+ 	         //TODO: Should use RemoveFirstSpaces()
+
+ 	         //- This is a workaround to set the Request-URI artificially
+ 	         if (strncasecmp(strpos, "Request-URI: ", 13) == 0)
+ 	         {
+ 	            if (sip_debug_test_pvt(p))
+ 	               ast_verbose("Setting RequestURI: to %s\n", p->uri);
+ 	            ast_string_field_set(p, uri, strpos + 13);
+ 	         }
+ 	         //- This is a workaround to set the INVITE packet destination from Via:
+ 	         else if (strncasecmp(strpos, "P-Via: ", 7) == 0)
+ 	         {
+ 	            if (sip_debug_test_pvt(p))
+ 	               ast_verbose("Setting INVITE destination from via %s\n", strpos + 7);
+ 	            //- Function created to set the packet destination from invite notation
+ 	            set_destination_from_via(p, req, strpos + 7);
+ 	         }
+ 	         else if (strncasecmp(strpos, "P-Destination: ", 15) == 0)
+ 	         {
+ 	            if (sip_debug_test_pvt(p))
+ 	               ast_verbose("Setting INVITE destination to %s\n", strpos + 15);
+ 	            create_addr(p, strpos + 15, NULL, 0);
+ 	         }
+ 	         else if (strncasecmp(strpos, "Route: ", 7) == 0)
+ 	         {
+ 	            if (sip_debug_test_pvt(p))
+ 	               ast_verbose("Setting Route: to %s\n", strpos + 7);
+ 	            create_route(p, strpos + 7, 0);
+ 	         }
+ 	         else if (strncasecmp(strpos, "Via: ", 5) == 0)
+ 	         {
+ 	            ast_string_field_build(p, via, "%s", strpos + 5);
+ 	            if (sip_debug_test_pvt(p))
+ 	               ast_verbose("Setting Via: to %s\n", p->via);
+ 	         }
+ 	         else if (strncasecmp(strpos, "To: ", 4) == 0)
+ 	         {
+ 	            strncpy(to, strpos + 4, sizeof(to));
+ 	            if (sip_debug_test_pvt(p))
+ 	               ast_verbose("Setting To: to %s\n", to);
+ 	         }
+ 	         else if (strncasecmp(strpos, "From: ", 6) == 0)
+ 	         {
+ 	            if (strstr(strpos, ";tag="))
+ 	               strncpy(from, strpos + 6, sizeof(from));
+ 	            else
+ 	               snprintf(from, sizeof(from), "%s;tag=%s", strpos + 6, p->tag);
+ 	            if (sip_debug_test_pvt(p))
+ 	               ast_verbose("Setting From: to %s\n", from);
+ 	         }
+ 	         else if (strncasecmp(strpos, "Contact: ", 9) == 0)
+ 	         {
+ 	            ast_string_field_build(p, our_contact, "%s", strpos + 9);
+ 	            if (sip_debug_test_pvt(p))
+ 	               ast_verbose("Setting Contact: to %s\n", p->our_contact);
+ 	         }
+ 	         else if (strncasecmp(strpos, "Call-ID: ", 9) == 0)
+ 	         {
+ 	            ast_string_field_build(p, callid, "%s", strpos + 9);
+ 	            if (sip_debug_test_pvt(p))
+ 	               ast_verbose("Setting Contact: to %s\n", p->callid);
+ 	         }
+ 	         else if (strncasecmp(strpos, "P-Asserted-Identity: ", 21) == 0)
+ 	         {
+ 	            ast_string_field_build(p, p_asserted_id, "%s", strpos + 21);
+ 	            if (sip_debug_test_pvt(p))
+ 	               ast_verbose("Setting P-Asserted-Identity: to %s\n", p->p_asserted_id);
+ 	         }
+ 	         else if (strncasecmp(strpos, "P-Called-Party-ID: ", 19) == 0)
+ 	         {
+ 	            ast_string_field_build(p, p_called_party_id, "%s", strpos + 19);
+ 	            if (sip_debug_test_pvt(p))
+ 	               ast_verbose("Setting P-Called-Party-ID: to %s\n", p->p_called_party_id);
+ 	         }
+ 	         else if (strncasecmp(strpos, "P-Preferred-Identity: ", 22) == 0)
+ 	         {
+ 	            ast_string_field_build(p, p_preferred_id, "%s", strpos + 22);
+ 	            if (sip_debug_test_pvt(p))
+ 	               ast_verbose("Setting P-Preferred-Identity: to %s\n", p->p_preferred_id);
+ 	         }
+ 	         else if (strncasecmp(strpos, "Privacy: ", 9) == 0)
+ 	         {
+ 	            ast_string_field_build(p, p_privacy_id, "%s", strpos + 9);
+ 	            if (sip_debug_test_pvt(p))
+ 	               ast_verbose("Setting Privacy: to %s\n", p->p_privacy_id);
+ 	         }
+ 	         else
+ 	         {
+ 	            if ((strstart = strchr(strpos, ':')) != NULL)
+ 	            {
+ 	               *strstart = '\0';
+ 	               if (*(strstart + 1) != '\0' && extra_headers < 10)
+ 	               {
+ 	                  if (sip_debug_test_pvt(p))
+ 	                     ast_verbose("Setting %s: to %s\n", strpos, strstart + 2);
+ 	                  strncpy(header_name[extra_headers], strpos, sizeof(header_name[extra_headers]));
+ 	                  strncpy(header_field[extra_headers], strstart + 2, sizeof(header_field[extra_headers]));
+ 	                  ++extra_headers;
+ 	               }
+ 	               else ast_log(LOG_WARNING, "Ignoring %d header %s: %s\n", extra_headers, strpos, strstart + 1);
+ 	            }
+ 	            else ast_log(LOG_WARNING, "Ignoring header %s\n", strpos);
+ 	         }
+
+ 	         if (a != NULL) strpos = a + 1;
+ 	         else break;
+ 	      }
+ 	   }
+ 	   else ast_log(LOG_WARNING, "No owner for chan_pvt!\n");
+ 	}
+
 	init_req(req, sipmethod, p->uri);
 	/* now tmp_n is available so reuse it to build the CSeq */
 	snprintf(tmp_n, sizeof(tmp_n), "%u %s", ++p->ocseq, sip_methods[sipmethod].text);
@@ -14075,6 +14321,18 @@
 	if (!ast_strlen_zero(global_useragent)) {
 		add_header(req, "User-Agent", global_useragent);
 	}
+	if (!ast_strlen_zero(p->p_asserted_id))
+	   add_header(req, "P-Asserted-Identity", p->p_asserted_id);
+	if(!ast_strlen_zero(p->p_called_party_id))
+	   add_header(req, "P-Called-Party-ID", p->p_called_party_id);
+	if (!ast_strlen_zero(p->p_preferred_id))
+	   add_header(req, "P-Preferred-Identity", p->p_preferred_id);
+	if(!ast_strlen_zero(p->p_privacy_id))
+	   add_header(req, "Privacy", p->p_privacy_id);
+	for (i = 0; i < extra_headers; i++)
+	{
+	   add_header(req, header_name[i], header_field[i]);
+	   }
 }
 
 /*! \brief Add "Diversion" header to outgoing message
@@ -16380,6 +16638,78 @@
 	}
 }
 
+/*! \brief Create route list from string */
+static void create_route(struct sip_pvt *p, char *rr, int backwards)
+{
+   struct sip_route *thishop, *head, *tail;
+   int len;
+
+   /* Once a persistent route is set, don't fool with it */
+   if (p->route && p->route_persistent) {
+      ast_debug(1, "create_route: Retaining previous route: <%s>\n", p->route->hop);
+      return;
+   }
+
+   if (p->route) {
+      free_old_route(p->route);
+      p->route = NULL;
+   }
+
+   /* We only want to create the route set the first time this is called */
+   p->route_persistent = 0;
+
+   /* Build a tailq, then assign it to p->route when done.
+    * If backwards, we add entries from the head so they end up
+    * in reverse order. However, we do need to maintain a correct
+    * tail pointer because the contact is always at the end.
+    */
+   head = NULL;
+   tail = head;
+   /* 1st we pass through all the hops in any Record-Route headers */
+   if (*rr == '\0')
+   {
+      ast_log(LOG_WARNING, "create_route: Route was empty\n");
+      return;
+   }
+   for (; (rr = strchr(rr, '<')) ; rr += len) { /* Each route entry */
+      ++rr;
+      len = strcspn(rr, ">") + 1;
+      /* Make a struct route */
+      if ((thishop = ast_malloc(sizeof(*thishop) + len))) {
+         /* ast_calloc is not needed because all fields are initialized in this block */
+         ast_copy_string(thishop->hop, rr, len);
+         ast_debug(2, "create_route: Record-Route hop: <%s>\n", thishop->hop);
+         /* Link in */
+         if (backwards) {
+            /* Link in at head so they end up in reverse order */
+            thishop->next = head;
+            head = thishop;
+            /* If this was the first then it'll be the tail */
+            if (!tail) {
+               tail = thishop;
+            }
+         } else {
+            thishop->next = NULL;
+            /* Link in at the end */
+            if (tail) {
+               tail->next = thishop;
+            } else {
+               head = thishop;
+            }
+            tail = thishop;
+         }
+      }
+   }
+
+   /* Store as new route */
+   p->route = head;
+
+   /* For debugging dump what we ended up with */
+   if (sip_debug_test_pvt(p)) {
+      list_route(p->route);
+   }
+}
+
 /*! \brief builds the sip_pvt's nonce field which is used for the authentication 
  *  challenge.  When forceupdate is not set, the nonce is only updated if
  *  the current one is stale.  In this case, a stalenonce is one which
@@ -17518,6 +17848,172 @@
 	return 0;
 }
 
+static int get_headers(struct sip_pvt *p, struct sip_request *oreq)
+{
+   struct sip_request *req;
+   int i;
+
+   req = oreq;
+   if (!req)
+      req = &p->initreq;
+
+   p->ic_extra_data[0] = '\0';
+
+   for (i = 1; i < req->headers; i++)
+   {
+      const char *header = REQ_OFFSET_TO_STR(req, header[i]);
+      if (strlen(p->ic_extra_data) + strlen(header) < sizeof(p->ic_extra_data))
+      {
+         if (p->ic_extra_data[0] == '\0') sprintf(p->ic_extra_data, "%s", header);
+         else sprintf(p->ic_extra_data, "%s%c%s", p->ic_extra_data, 29, header);
+      }
+      else
+      {
+         ast_log(LOG_WARNING, "Extra data too long!\n");
+         return -1;
+      }
+   }
+   if (sip_debug_test_pvt(p))
+      ast_verbose("Headers: %s\n", p->ic_extra_data);
+
+   return 0;
+}
+
+/*--- get_to: get To: ---*/
+static int get_to(struct sip_pvt *p, struct sip_request *oreq)
+{
+   char tmp[256], *c, *a;
+   struct sip_request *req;
+
+   req = oreq;
+   if (!req)
+      req = &p->initreq;
+   ast_copy_string(tmp, sip_get_header(req, "To"), sizeof(tmp));
+   if (ast_strlen_zero(tmp))
+      return 0;
+   c = get_in_brackets(tmp);
+
+   if (!strncasecmp(c, "sip:", 4) || !strncasecmp(c, "tel:", 4)) {
+      c += 4;
+   } else if (!strncasecmp(c, "sips:", 5)) {
+      c += 5;
+   } else {
+      ast_log(LOG_WARNING, "Huh?  Not an To SIP header (%s)?\n", c);
+      return -1;
+   }
+
+   if ((a = strchr(c, ';'))) *a = '\0';
+
+   if (sip_debug_test_pvt(p))
+      ast_verbose("To is %s\n", c);
+   ast_string_field_set(p, to, c);
+
+   return 0;
+}
+
+/*--- get_p_called_party_id: get P-Called-Party-ID ---*/
+static int get_p_called_party_id(struct sip_pvt *p, struct sip_request *oreq)
+{
+   char tmp[256], *a;
+   struct sip_request *req;
+
+   req = oreq;
+   if (!req)
+      req = &p->initreq;
+   ast_copy_string(tmp, sip_get_header(req, "P-Called-Party-ID"), sizeof(tmp));
+   if (ast_strlen_zero(tmp))
+      return 0;
+
+   if ((a = strchr(tmp, ';'))) *a = '\0';
+
+   if (sip_debug_test_pvt(p))
+      ast_verbose("P-Called-Party-ID is %s\n", tmp);
+   ast_string_field_set(p, p_called_party_id, tmp);
+
+   return 0;
+}
+
+/*--- get_p_asserted_id: get P-Asserted-Identity ---*/
+static int get_p_asserted_id(struct sip_pvt *p, struct sip_request *oreq)
+{
+   char tmp[256], *c, *a;
+   struct sip_request *req;
+
+   req = oreq;
+   if (!req)
+      req = &p->initreq;
+   ast_copy_string(tmp, sip_get_header(req, "P-Asserted-Identity"), sizeof(tmp));
+   if (ast_strlen_zero(tmp))
+      return 0;
+
+   // get long p_asserted_id - before get_in_brackets
+   if (sip_debug_test_pvt(p))
+      ast_verbose("P-Asserted-Identity is %s\n", tmp);
+   ast_string_field_set(p, p_asserted_id, tmp);
+
+   // This destroys part of tmp
+   c = get_in_brackets(tmp);
+
+   if (!strncasecmp(c, "sip:", 4) || !strncasecmp(c, "tel:", 4)) {
+      c += 4;
+   } else if (!strncasecmp(c, "sips:", 5)) {
+      c += 5;
+   } else {
+      ast_log(LOG_WARNING, "Huh?  Not an To SIP header (%s)?\n", c);
+      return -1;
+   }
+
+   // get short p_asserted_id
+   if ((a = strchr(c, ';'))) *a = '\0';
+
+   if (sip_debug_test_pvt(p))
+      ast_verbose("P-Asserted-Identity short is %s\n", c);
+   ast_string_field_set(p, short_p_asserted_id, c);
+
+   return 0;
+}
+
+/*--- get_p_preferred_id: get P-Preferred-Identity ---*/
+static int get_p_preferred_id(struct sip_pvt *p, struct sip_request *oreq)
+{
+   char tmp[256], *a;
+   struct sip_request *req;
+
+   req = oreq;
+   if (!req)
+      req = &p->initreq;
+   ast_copy_string(tmp, sip_get_header(req, "P-Preferred-Identity"), sizeof(tmp));
+   if (ast_strlen_zero(tmp))
+      return 0;
+
+   if ((a = strchr(tmp, ';'))) *a = '\0';
+
+   if (sip_debug_test_pvt(p))
+      ast_verbose("P-Preferred-Identity is %s\n", tmp);
+   ast_string_field_set(p, p_preferred_id, tmp);
+
+   return 0;
+}
+
+/*--- get_p_privacy_id: get Privacy ---*/
+static int get_p_privacy_id(struct sip_pvt *p, struct sip_request *oreq)
+{
+   char tmp[256];
+   struct sip_request *req;
+
+   req = oreq;
+   if (!req)
+      req = &p->initreq;
+   ast_copy_string(tmp, sip_get_header(req, "Privacy"), sizeof(tmp));
+   if (ast_strlen_zero(tmp))
+      return 0;
+   if (sip_debug_test_pvt(p))
+      ast_verbose("Privacy is %s\n", tmp);
+   ast_string_field_set(p, p_privacy_id, tmp);
+
+   return 0;
+}
+
 /*!
  * \brief Find out who the call is for.
  *
@@ -18125,6 +18621,65 @@
 	}
 }
 
+static void set_destination_from_via(struct sip_pvt *p, struct sip_request *req, char *via)
+{
+   char *c, *maddr;
+   struct ast_sockaddr tmp;
+   uint16_t port;
+
+   ast_copy_string(via, sip_get_header(req, "Via"), sizeof(via));
+
+   /* Work on the leftmost value of the topmost Via header */
+   c = strchr(via, ',');
+   if (c)
+      *c = '\0';
+
+   /* Check for rport
+   c = strstr(via, ";rport");
+   if (c && (c[6] != '=')) { // rport query, not answer
+      ast_set_flag(&p->flags[1], SIP_PAGE2_RPORT_PRESENT);
+      ast_set_flag(&p->flags[0], SIP_NAT_RPORT_PRESENT);
+   }
+    */
+   /* Check for maddr */
+   maddr = strstr(via, "maddr=");
+   if (maddr) {
+      maddr += 6;
+      c = maddr + strspn(maddr, "abcdefghijklmnopqrstuvwxyz"
+            "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-.:[]");
+      *c = '\0';
+   }
+
+   c = strchr(via, ';');
+   if (c)
+      *c = '\0';
+
+   c = strchr(via, ' ');
+   if (c) {
+      *c = '\0';
+      c = ast_skip_blanks(c+1);
+      if (strcasecmp(via, "SIP/2.0/UDP") && strcasecmp(via, "SIP/2.0/TCP") && strcasecmp(via, "SIP/2.0/TLS")) {
+         ast_log(LOG_WARNING, "Don't know how to respond via '%s'\n", via);
+         return;
+      }
+
+      if (maddr && ast_sockaddr_resolve_first(&p->sa, maddr, 0)) {
+         p->sa = p->recv;
+      }
+
+      ast_sockaddr_resolve_first(&tmp, c, 0);
+      port = ast_sockaddr_port(&tmp);
+      ast_sockaddr_set_port(&p->sa,
+            port != 0 ? port : STANDARD_SIP_PORT);
+
+      if (sip_debug_test_pvt(p)) {
+         ast_verbose("Sending to %s (%s)\n",
+               ast_sockaddr_stringify(sip_real_dst(p)),
+               sip_nat_mode(p));
+      }
+   }
+}
+
 /*! \brief Validate device authentication */
 static enum check_auth_result check_peer_ok(struct sip_pvt *p, char *of,
 	struct sip_request *req, int sipmethod, struct ast_sockaddr *addr,
@@ -25454,6 +26009,14 @@
 			goto request_invite_cleanup;
 		}
 		gotdest = get_destination(p, NULL, &cc_recall_core_id);	/* Get destination right away */
+
+		get_p_called_party_id(p, NULL);
+		get_p_asserted_id(p, NULL);
+		get_p_preferred_id(p, NULL);
+		get_p_privacy_id(p, NULL);
+		get_to(p, NULL);
+		get_headers(p, req);
+
 		extract_uri(p, req);			/* Get the Contact URI */
 		build_contact(p);			/* Build our contact header */
 
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-11.3.0.p006/channels/sip/include/sip.h asterisk-11.3.0/channels/sip/include/sip.h
--- asterisk-11.3.0.p006/channels/sip/include/sip.h	2013-05-17 10:23:21.065616798 +0100
+++ asterisk-11.3.0/channels/sip/include/sip.h	2013-05-17 14:27:32.552644000 +0100
@@ -1062,6 +1062,21 @@
 		AST_STRING_FIELD(parkinglot);   /*!< Parkinglot */
 		AST_STRING_FIELD(engine);       /*!< RTP engine to use */
 		AST_STRING_FIELD(dialstring);   /*!< The dialstring used to call this SIP endpoint */
+		AST_STRING_FIELD(to);   /*!< Our To header */
+		// RFC 3325
+		AST_STRING_FIELD(p_asserted_id); // P-Asserted-Identity
+		AST_STRING_FIELD(p_preferred_id); // P-Preferred-Identity
+		AST_STRING_FIELD(p_privacy_id); // Privacy
+		// RFC 3455
+		AST_STRING_FIELD(p_called_party_id); // P-Called-Party-ID - The UAS may use the value in the P-Called-Party-ID header field to provide services based on the called party URI, such as, e.g., filtering of calls depending on the date and time, distinctive presentation services, distinctive alerting tones, etc.
+		//AST_STRING_FIELD(p_associated_uri); // P-Associated-URI - The header value contains a list of zero or more associated URIs to the address-of-record URI. (REGISTER)
+		//AST_STRING_FIELD(p_visited_network_id); // P-Visited-Network-ID - User agent clients SHOULD NOT insert a P-Visited-Network-ID header in any SIP message.
+		//AST_STRING_FIELD(p_access_network_info); // P-Access-Network-Info - A UA that supports this extension and is willing to disclose the related parameters MAY insert the P-Access-Network-Info header in any SIP request or response.
+		// Charging
+		//AST_STRING_FIELD(p_charging_vector); // P-Charging-Vector -  UAs need not understand this header.
+		//AST_STRING_FIELD(p_charging_function_address); // P-Charging-Function-Addresses - UAs need not understand this header.
+		AST_STRING_FIELD(short_p_asserted_id);
+
 		AST_STRING_FIELD(last_presence_subtype);   /*!< The last presence subtype sent for a subscription. */
 		AST_STRING_FIELD(last_presence_message);   /*!< The last presence message for a subscription */
 		AST_STRING_FIELD(msg_body);     /*!< Text for a MESSAGE body */
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-11.3.0.p006/include/asterisk/channel.h asterisk-11.3.0/include/asterisk/channel.h
--- asterisk-11.3.0.p006/include/asterisk/channel.h	2013-05-17 10:23:34.784437373 +0100
+++ asterisk-11.3.0/include/asterisk/channel.h	2013-05-17 15:51:43.830730000 +0100
@@ -3909,15 +3909,17 @@
 const AST_SMRA_ATTRIB *ast_channel_client_smra_attrib(const struct ast_channel *chan);
 void ast_channel_client_smra_attrib_set(struct ast_channel *chan, AST_SMRA_ATTRIB *client_smra_attrib);
 char *ast_channel_cid_ani(const struct ast_channel *chan);
-void ast_channel_cid_ani_set(struct ast_channel *chan, char *value);
+void ast_channel_cid_ani_set(struct ast_channel *chan, const char *value);
 char *ast_channel_cid_dnis(const struct ast_channel *chan);
-void ast_channel_cid_dnis_set(struct ast_channel *chan, char *value);
+void ast_channel_cid_dnis_set(struct ast_channel *chan, const char *value);
+char *ast_channel_cid_uri(const struct ast_channel *chan);
+void ast_channel_cid_uri_set(struct ast_channel *chan, const char *value);
 char *ast_channel_cid_asserted_id(const struct ast_channel *chan);
-void ast_channel_cid_asserted_id_set(struct ast_channel *chan, char *value);
+void ast_channel_cid_asserted_id_set(struct ast_channel *chan, const char *value);
 char *ast_channel_cid_callid(const struct ast_channel *chan);
-void ast_channel_cid_callid_set(struct ast_channel *chan, char *value);
+void ast_channel_cid_callid_set(struct ast_channel *chan, const char *value);
 char *ast_channel_cid_privacy(const struct ast_channel *chan);
-void ast_channel_cid_privacy_set(struct ast_channel *chan, char *value);
+void ast_channel_cid_privacy_set(struct ast_channel *chan, const char *value);
 const struct ast_format_cap *ast_channel_jointcapability(const struct ast_channel *chan);
 void ast_channel_jointcapability_set(struct ast_channel *chan, struct ast_format_cap *value);
 const SDPMedia *ast_channel_client_sdp(const struct ast_channel *chan);
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-11.3.0.p006/main/channel_internal_api.c asterisk-11.3.0/main/channel_internal_api.c
--- asterisk-11.3.0.p006/main/channel_internal_api.c	2013-05-17 10:25:12.928937421 +0100
+++ asterisk-11.3.0/main/channel_internal_api.c	2013-05-17 14:45:11.704482000 +0100
@@ -775,7 +775,7 @@
 {
    return chan->cid.cid_ani_url;
 }
-void ast_channel_cid_ani_set(struct ast_channel *chan, char *value)
+void ast_channel_cid_ani_set(struct ast_channel *chan, const char *value)
 {
    chan->cid.cid_ani_url = ast_strdup(value);
 }
@@ -783,15 +783,23 @@
 {
    return chan->cid.cid_dnis_url;
 }
-void ast_channel_cid_dnis_set(struct ast_channel *chan, char *value)
+void ast_channel_cid_dnis_set(struct ast_channel *chan, const char *value)
 {
    chan->cid.cid_dnis_url = ast_strdup(value);
 }
+char *ast_channel_cid_uri(const struct ast_channel *chan)
+{
+   return chan->cid.cid_req_uri;
+}
+void ast_channel_cid_uri_set(struct ast_channel *chan, const char *value)
+{
+   chan->cid.cid_req_uri = ast_strdup(value);
+}
 char *ast_channel_cid_asserted_id(const struct ast_channel *chan)
 {
    return chan->cid.cid_asserted_id;
 }
-void ast_channel_cid_asserted_id_set(struct ast_channel *chan, char *value)
+void ast_channel_cid_asserted_id_set(struct ast_channel *chan, const char *value)
 {
    chan->cid.cid_asserted_id = ast_strdup(value);
 }
@@ -799,7 +807,7 @@
 {
    return chan->cid.callid;
 }
-void ast_channel_cid_callid_set(struct ast_channel *chan, char *value)
+void ast_channel_cid_callid_set(struct ast_channel *chan, const char *value)
 {
    chan->cid.callid = ast_strdup(value);
 }
@@ -807,7 +815,7 @@
 {
    return chan->cid.cid_privacy;
 }
-void ast_channel_cid_privacy_set(struct ast_channel *chan, char *value)
+void ast_channel_cid_privacy_set(struct ast_channel *chan, const char *value)
 {
    chan->cid.cid_privacy = ast_strdup(value);
 }
