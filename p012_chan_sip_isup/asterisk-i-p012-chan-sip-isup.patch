diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-11.3.0.p011/channels/chan_sip.c asterisk-11.3.0/channels/chan_sip.c
--- asterisk-11.3.0.p011/channels/chan_sip.c	2013-05-23 11:16:43.429187624 +0100
+++ asterisk-11.3.0/channels/chan_sip.c	2013-05-23 15:00:40.241171000 +0100
@@ -668,6 +668,45 @@
 static const char config[] = "sip.conf";                /*!< Main configuration file */
 static const char notify_config[] = "sip_notify.conf";  /*!< Configuration file for sending Notify with CLI commands to reconfigure or reboot phones */
 
+// --- ISUP ---
+// Message type passed to add_sdp function for SIP-I ISUP
+enum sip_msg_type {
+   SIP_MSG_OUTGOING = 0,
+   SIP_MSG_EARLY = 1,
+   SIP_MSG_ANSWER = 2,
+   SIP_MSG_REINVITE = 3,
+   SIP_MSG_RINGING = 4,
+   SIP_MSG_OTHER = 5,
+};
+enum isup_msg_type {
+   ISUP_MSG_ACM_CHARGE = 1,
+   ISUP_MSG_ANM_CHARGE = 2,
+   ISUP_MSG_CON_CHARGE = 3,
+   ISUP_MSG_REL = 4,
+   ISUP_MSG_RLC = 5,
+   ISUP_MSG_CPG_CHARGE = 6,
+   ISUP_MSG_ACM_NO_CHARGE = 7,
+   ISUP_MSG_ANM_NO_CHARGE = 8,
+   ISUP_MSG_CON_NO_CHARGE = 9,
+   ISUP_MSG_CPG_NO_CHARGE = 10,
+};
+
+char isupmime[128] = "";
+char isupsignal[] = "signal; handling=optional";
+char multipartboundary[] = "ssboundary";
+
+unsigned char isupACM_nocharge[] = { 0x06, 0x15, 0x14, 0x01, 0x29, 0x01, 0x01, 0x00 };  // NO CHARGE
+unsigned char isupACM_charge[] = { 0x06, 0x12, 0x00, 0x01, 0x29, 0x01, 0x01, 0x00 };  // CHARGE ZTE
+unsigned char isupANM_nocharge[] = { 0x09, 0x01, 0x11, 0x02, 0x01, 0x04, 0x00}; // ZTE
+unsigned char isupANM_charge[] = { 0x09, 0x01, 0x11, 0x02, 0x02, 0x04, 0x00}; // ZTE
+unsigned char isupCON_nocharge[] = { 0x07, 0x15, 0x14, 0x01, 0x29, 0x01, 0x01, 0x00 };
+unsigned char isupCON_charge[] = { 0x07, 0x16, 0x14, 0x01, 0x29, 0x01, 0x01, 0x00 };
+unsigned char isupRLC[] = { 0x10, 0x00, 0x00, 0x00 };
+unsigned char isupREL[] = { 0x0c, 0x02, 0x00, 0x02, 0x80, 0x90 };
+unsigned char isupCPG_nocharge[] = { 0x2c, 0x01, 0x01, 0x11, 0x02, 0x15, 0x34, 0x29, 0x01, 0x0b, 0x00 };
+unsigned char isupCPG_charge[] = { 0x2c, 0x01, 0x01, 0x11, 0x02, 0x16, 0x34, 0x29, 0x01, 0x0b, 0x00 };
+//--- ISUP End ---
+
 /*! \brief Readable descriptions of device states.
  *  \note Should be aligned to above table as index */
 static const struct invstate2stringtable {
@@ -1666,6 +1705,10 @@
 static int add_max_forwards(struct sip_pvt *dialog, struct sip_request *req);
 static int add_content(struct sip_request *req, const char *line);
 static int finalize_content(struct sip_request *req);
+//--- ISUP ---
+static int add_bin_content(struct sip_request *req, const unsigned char *line, int len);
+static int add_isup_content(struct sip_pvt *p, struct sip_request *req, int isup_msg);
+//--- ISUP END  ---
 static void destroy_msg_headers(struct sip_pvt *pvt);
 static int add_text(struct sip_request *req, struct sip_pvt *p);
 static int add_digit(struct sip_request *req, char digit, unsigned int duration, int mode);
@@ -4426,6 +4469,19 @@
 		return AST_FAILURE;
 	}
 	ast_str_set(&pkt->data, 0, "%s%s", ast_str_buffer(data), "\0");
+
+	//--- ISUP ---
+	if(ast_test_flag(&p->isupflags, ISUP_SIP_MSG))
+	{
+	   // Transmitting reliable information with ISUP requires that the
+	   // entire message be copied by memory and not by string operations
+	   // This operation is done after ast_str_set because at this point
+	   // pkt->data has sufficient memory space to accomodate message with ISUP
+	   memcpy(pkt->data->str, data->str, ast_str_strlen(data));
+	   pkt->data->used = data->used;
+	}
+	//--- ISUP END ---
+
 	/* copy other parameters from the caller */
 	pkt->method = sipmethod;
 	pkt->seqno = seqno;
@@ -7071,46 +7126,172 @@
    28 address incomplete                   484 Address incomplete
    29 facility rejected                    501 Not implemented
    31 normal unspecified                   480 Temporarily unavailable
+         ISUP Cause value                        SIP response
+   ----------------                        ------------
+   34 no circuit available                 503 Service unavailable
+   38 network out of order                 503 Service unavailable
+   41 temporary failure                    503 Service unavailable
+   42 switching equipment congestion       503 Service unavailable
+   47 resource unavailable                 503 Service unavailable
+
+    Service or option not available
+
+   ISUP Cause value                        SIP response
+   ----------------                        ------------
+   55 incoming calls barred within CUG     403 Forbidden
+   57 bearer capability not authorized     403 Forbidden
+   58 bearer capability not presently      503 Service unavailable
+   available
+
+   Service or option not available
+
+   ISUP Cause value                        SIP response
+   ----------------                        ------------
+   65 bearer capability not implemented    488 Not Acceptable Here
+   70 only restricted digital avail        488 Not Acceptable Here
+   79 service or option not implemented    501 Not implemented
+
+   Invalid message
+
+   ISUP Cause value                        SIP response
+   ----------------                        ------------
+   87 user not member of CUG               403 Forbidden
+   88 incompatible destination             503 Service unavailable
+
+   Protocol error
+
+   ISUP Cause value                        SIP response
+   ----------------                        ------------
+   102 recovery of timer expiry            504 Gateway timeout
+   111 protocol error                      500 Server internal error
+
+   Interworking
+
+   ISUP Cause value                        SIP response
+   ----------------                        ------------
+   127 interworking unspecified            500 Server internal error
+
 \endverbatim
 */
 const char *hangup_cause2sip(int cause)
 {
 	switch (cause) {
+	   case 300:
+	      return "300 Multiple Choices";
+	   case 301:
+	      return "301 Moved Permanently";
+	   case 302:
+	      return "302 Moved Temporarily";
+	   case 305:
+	      return "305 Use Proxy";
+	   case 380:
+	      return "380 Alternative Service";
+	   case 400:
+	      return "400 Bad Request";
+	   case 401:
+	      return "401 Unauthorized";
+	   case 402:
+	      return "402 Payment Required";
+	   case AST_CAUSE_CALL_REJECTED:           /* 21 */
+	   case 403:
+	      return "403 Forbidden";
 		case AST_CAUSE_UNALLOCATED:		/* 1 */
 		case AST_CAUSE_NO_ROUTE_DESTINATION:	/* 3 IAX2: Can't find extension in context */
 		case AST_CAUSE_NO_ROUTE_TRANSIT_NET:	/* 2 */
+		case AST_CAUSE_INCOMING_CALL_BARRED_CUG: /* 55 */
+		case AST_CAUSE_BEARERCAPABILITY_NOTAUTH: /* 57 */
+		case 404:
 			return "404 Not Found";
-		case AST_CAUSE_CONGESTION:		/* 34 */
-		case AST_CAUSE_SWITCH_CONGESTION:	/* 42 */
-			return "503 Service Unavailable";
+		case 405:
+		   return "405 Method Not Allowed";
+		case 406:
+		   return "406 Not Acceptable";
+		case 407:
+		   return "407 Proxy Authentication Required";
 		case AST_CAUSE_NO_USER_RESPONSE:	/* 18 */
+		case 408:
 			return "408 Request Timeout";
-		case AST_CAUSE_NO_ANSWER:		/* 19 */
-		case AST_CAUSE_UNREGISTERED:        /* 20 */
-			return "480 Temporarily unavailable";
-		case AST_CAUSE_CALL_REJECTED:		/* 21 */
-			return "403 Forbidden";
 		case AST_CAUSE_NUMBER_CHANGED:		/* 22 */
+		case 410:
 			return "410 Gone";
+		case 413:
+		   return "413 Request Entity Too Large";
+		case 414:
+		   return "414 Request-URI Too Long";
+		case 415:
+		   return "415 Unsupported Media Type";
+		case 416:
+		   return "416 Unsupported URI Scheme";
+		case 420:
+		   return "420 Bad Extension";
+		case 421:
+		   return "421 Extension Required";
+		case 423:
+		   return "423 Interval Too Brief";
+		case AST_CAUSE_NO_ANSWER:           /* 19 */
 		case AST_CAUSE_NORMAL_UNSPECIFIED:	/* 31 */
-			return "480 Temporarily unavailable";
+		case 480:
+		   return "480 Temporarily unavailable";
+		case 481:
+		   return "481 Call/Transaction Does Not Exist";
+		case 482:
+		   return "482 Loop Detected";
+		case 483:
+		   return "483 Too Many Hops";
 		case AST_CAUSE_INVALID_NUMBER_FORMAT:
+		case 484:
 			return "484 Address incomplete";
+		case 485:
+		   return "485 Ambiguous";
 		case AST_CAUSE_USER_BUSY:
-			return "486 Busy here";
+		case 486:
+		   return "486 Busy here";
+		case 487:
+		   return "487 Request Terminated";
+		case AST_CAUSE_BEARERCAPABILITY_NOTIMPL: /* 65 */
+		case AST_CAUSE_ONLY_RESTRICTED: /* 70 */
+		case 488:
+		   return "488 Not Acceptable Here";
+		case 491:
+		   return "491 Request Pending";
+		case 493:
+		   return "493 Undecipherable";
 		case AST_CAUSE_FAILURE:
+		case AST_CAUSE_PROTOCOL_ERROR:
+		case AST_CAUSE_INTERWORKING:
+		case 500:
 			return "500 Server internal failure";
 		case AST_CAUSE_FACILITY_REJECTED:	/* 29 */
-			return "501 Not Implemented";
-		case AST_CAUSE_CHAN_NOT_IMPLEMENTED:
-			return "503 Service Unavailable";
-		/* Used in chan_iax2 */
+		case 501:
+		case AST_CAUSE_SERVICE_NOT_IMPLEMENTED: /* 79 */
+		   return "501 Not Implemented";
+		   /* Used in chan_iax2 */
 		case AST_CAUSE_DESTINATION_OUT_OF_ORDER:
-			return "502 Bad Gateway";
-		case AST_CAUSE_BEARERCAPABILITY_NOTAVAIL:	/* Can't find codec to connect to host */
-			return "488 Not Acceptable Here";
-		case AST_CAUSE_INTERWORKING:	/* Unspecified Interworking issues */
-			return "500 Network error";
+		case 502:
+		   return "502 Bad Gateway";
+		case AST_CAUSE_NORMAL_TEMPORARY_FAILURE: /* 41 */
+		case AST_CAUSE_RESOURCE_UNAVAILABLE: /* 47 */
+		case AST_CAUSE_CONGESTION:          /* 34 */
+		case AST_CAUSE_SWITCH_CONGESTION:   /* 42 */
+		case AST_CAUSE_CHAN_NOT_IMPLEMENTED:
+		case AST_CAUSE_BEARERCAPABILITY_NOTAVAIL: /* 58 */
+		case AST_CAUSE_INCOMPATIBLE_DESTINATION: /* 88 */
+		case 503:
+		   return "503 Service Unavailable";
+		case 504:
+		   return "504 Server Time-out";
+		case 505:
+		   return "505 Version Not Supported";
+		case 513:
+		   return "513 Message Too Large";
+		case 600:
+		   return "600 Busy Everywhere";
+		case 603:
+		   return "603 Decline";
+		case 604:
+		   return "604 Does Not Exist Anywhere";
+		case 606:
+		   return "606 Not Acceptable";
 
 		case AST_CAUSE_NOTDEFINED:
 		default:
@@ -7390,7 +7571,17 @@
 		ast_setstate(ast, AST_STATE_UP);
 		ast_debug(1, "SIP answering channel: %s\n", ast_channel_name(ast));
 		ast_rtp_instance_update_source(p->rtp);
-		res = transmit_response_with_sdp(p, "200 OK", &p->initreq, XMIT_CRITICAL, FALSE, TRUE);
+
+		//--- ISUP ---
+		if (ast_channel_charge_type(ast))
+		   ast_set_flag(&p->isupflags, ISUP_CHARGE);
+		// If this is an answer in an ISUP call then we must not send SDP if it has already been sent with SESSION PROGRESS
+		if(ast_test_flag(&p->isupflags, ISUP_SIP_MSG) && ast_test_flag(&p->flags[0], SIP_PROGRESS_SENT))
+		   res = transmit_response(p, "200 OK", &p->initreq);
+		else
+		   res = transmit_response_with_sdp(p, "200 OK", &p->initreq, XMIT_CRITICAL, FALSE, TRUE);
+		//--- ISUP END ---
+
 		ast_set_flag(&p->flags[1], SIP_PAGE2_DIALOG_ESTABLISHED);
 	}
 	sip_pvt_unlock(p);
@@ -7867,12 +8058,20 @@
 		res = -1;
 		break;
 	case AST_CONTROL_PROGRESS:
-		if ((ast_channel_state(ast) != AST_STATE_UP) &&
-		    !ast_test_flag(&p->flags[0], SIP_PROGRESS_SENT) &&
-		    !ast_test_flag(&p->flags[0], SIP_OUTGOING)) {
-			p->invitestate = INV_EARLY_MEDIA;
-			transmit_provisional_response(p, "183 Session Progress", &p->initreq, TRUE);
-			ast_set_flag(&p->flags[0], SIP_PROGRESS_SENT);
+	   //--- ISUP ---
+	   if(ast_channel_charge_type(ast))
+	      ast_set_flag(&p->isupflags, ISUP_CHARGE);
+
+	   if ((ast_channel_state(ast) != AST_STATE_UP) && !ast_test_flag(&p->flags[0], SIP_OUTGOING)) {
+	      if (ast_test_flag(&p->flags[0], SIP_PROGRESS_SENT))
+	         transmit_provisional_response(p, "183 Session Progress", &p->initreq, 0);
+	      else
+	      {
+	         p->invitestate = INV_EARLY_MEDIA;
+	         transmit_provisional_response(p, "183 Session Progress", &p->initreq, 1);
+	      }
+	      //--- ISUP END ---
+	      ast_set_flag(&p->flags[0], SIP_PROGRESS_SENT);
 			break;
 		}
 		res = -1;
@@ -9847,6 +10046,8 @@
 	int boundaryisquoted = FALSE;
 	int found_application_sdp = FALSE;
 	int found_end_of_headers = FALSE;
+	//--- ISUP ---
+	int got_sdp = FALSE;
 
 	content_length = sip_get_header(req, "Content-Length");
 
@@ -9908,12 +10109,23 @@
 		if (!strncasecmp(line, boundary, strlen(boundary))){
 			if (found_application_sdp && found_end_of_headers) {
 				req->sdp_count = (x - 1) - req->sdp_start;
-				return 1;
+				//--- ISUP ---
+				got_sdp = TRUE;  //We change the way this cycle works to be able to search for ISUP
 			}
 			found_application_sdp = FALSE;
 		}
 		if (!strcasecmp(line, "Content-Type: application/sdp"))
 			found_application_sdp = TRUE;
+		//--- ISUP ---
+		else if (!strncasecmp(line, "Content-Type: application/isup", 30))
+		{
+		   ast_log(LOG_NOTICE, "Found SDP with ISUP!\n");
+		   if(strlen(isupmime))
+		      req->embedded_isup = TRUE;
+		   else
+		      ast_log(LOG_NOTICE, "ISUP MIME Type is not set. Won't use ISUP\n");
+		}
+		//--- ISUP END ---
 		
 		if (ast_strlen_zero(line)) {
 			if (found_application_sdp && !found_end_of_headers){
@@ -9922,6 +10134,10 @@
 			}
 		}
 	}
+
+	if(got_sdp)
+	   return TRUE;
+
 	if (found_application_sdp && found_end_of_headers) {
 		req->sdp_count = x - req->sdp_start;
 		return TRUE;
@@ -10204,6 +10420,11 @@
 		ast_debug(3, "Processing session-level SDP %c=%s... %s\n", type, value, (processed == TRUE)? "OK." : "UNSUPPORTED OR FAILED.");
 	}
 
+	//--- ISUP ---
+	if(req->embedded_isup)
+	   ast_set_flag(&p->isupflags, ISUP_SIP_MSG);
+	/* If we need to check anything from the incoming ISUP message, that code should be placed in this function */
+
 	/* default: novideo and notext set */
 	p->novideo = TRUE;
 	p->notext = TRUE;
@@ -11534,6 +11755,9 @@
 static int finalize_content(struct sip_request *req)
 {
 	char clen[10];
+	//--- ISUP ---
+	char garbage[1024];
+	int space_used = 0;
 
 	if (req->lines) {
 		ast_log(LOG_WARNING, "finalize_content() called on a message that has already been finalized\n");
@@ -11543,10 +11767,42 @@
 	snprintf(clen, sizeof(clen), "%zd", ast_str_strlen(req->content));
 	add_header(req, "Content-Length", clen);
 
-	if (ast_str_strlen(req->content)) {
-		ast_str_append(&req->data, 0, "\r\n%s", ast_str_buffer(req->content));
+	//--- ISUP ---
+	// Before change all finalize content was the same as embedded_isup == FALSE
+	if(req->embedded_isup == FALSE)
+	{
+	   if (ast_str_strlen(req->content)) {
+	      ast_str_append(&req->data, 0, "\r\n%s", ast_str_buffer(req->content));
+	   }
+	   req->lines = ast_str_strlen(req->content) ? 1 : 0;
 	}
-	req->lines = ast_str_strlen(req->content) ? 1 : 0;
+	else
+	{
+	   if(req->content->used)
+	   {
+	      memset(garbage, 0, sizeof(garbage));
+	      if(req->content->used < 1024)
+	      {
+	         memset(garbage, 'w', req->content->used);
+	         garbage[1023] = '\0';
+	      }
+	      else
+	         ast_log(LOG_WARNING, "Size of garbage directory is too small to fit SDP content when finalizing\n");
+
+	      space_used = ast_str_strlen(req->data);
+
+	      ast_str_append(&req->data, 0, "\r\n%s", garbage);
+
+	      //Replace content from garbage with our very own
+	      memcpy(req->data->str + space_used + 2, req->content->str, req->content->used);
+
+	      //ast_log(LOG_WARNING, "Size of garbage directory is too small to fit SDP content when finalizing\n");
+	      //ast_log(LOG_NOTICE,"Response content at finalize %s\n", req->data->str);
+
+	      req->lines = 1;
+	   }
+	}
+	//--- ISUP End ---
 	return 0;
 }
 
@@ -11562,6 +11818,45 @@
 	return 0;
 }
 
+//--- ISUP -----
+/*! \brief Add binary content (not header) to SIP message */
+static int add_bin_content(struct sip_request *req, const unsigned char *line, int len)
+{
+
+   int need = 0;
+   char garbage[256];
+   int space_used = 0;
+
+   if (req->lines) {
+      ast_log(LOG_WARNING, "Can't add more content when the content has been finalized\n");
+      return -1;
+   }
+
+   // We must add binary data to the request content
+
+   if (len > sizeof(garbage))
+   {
+      ast_verbose("Failed to extend size from %d to %d\n", len, need);
+      return -1;
+   }
+
+   space_used = req->content->used;
+
+   memset(garbage, 0, sizeof(garbage));
+   memset(garbage, 'w', len);
+   garbage[255] = '\0';
+
+   ast_str_append(&req->content, 0, "%s", garbage);
+
+   //Replace content from garbage with ISUP
+   memcpy(req->content->str + space_used, line, len);
+
+   //ast_log(LOG_NOTICE, "SDP content had (%d) after adding (%d) ISUP (%s)", space_used, req->content->used, req->content->str);
+
+   return 0;
+}
+//--- ISUP End ---
+
 /*! \brief Copy one header field from one request to another */
 static int copy_header(struct sip_request *req, const struct sip_request *orig, const char *field)
 {
@@ -11984,6 +12279,51 @@
 		ast_log(LOG_WARNING, "error processing via header, will send response to originating address\n");
 	}
 
+	//--- ISUP ---
+	/* We must tread carefully.
+	 * First check if there is ISUP in the SIP Message Request
+	 * Then check if SDP has been sent already */
+	if (ast_test_flag(&p->isupflags, ISUP_SIP_MSG))
+	{
+	   if (p->method == SIP_INVITE)
+	   {
+	      if (msg[0] != '1' && msg[0] != '2')
+	         // Errors mean immediate disconnection via ISUP REL
+	         add_isup_content(p, resp, ISUP_MSG_REL);
+	      else if (msg[0] == '1' && (!strncmp(msg, "180", 3) || !strncmp(msg, "183", 3)))
+	      {
+	         // ACM with 180 Ringing or 183 Session Progress should be sent with SDP as it reserves the voice circuit
+	         // Otherwise it is a simple Call Progress (CPG)
+	         if (ast_test_flag(&p->isupflags, ISUP_ACM_SENT))
+	         {
+	            if(ast_test_flag(&p->isupflags, ISUP_CHARGE))
+	               add_isup_content(p, resp, ISUP_MSG_CPG_CHARGE);
+	            else
+	               add_isup_content(p, resp, ISUP_MSG_CPG_NO_CHARGE);
+	         }
+	      }
+	      else if (msg[0] == '2')
+	      {
+	         // if we sent an ACM then we should send an ANM otherwise this is a case for a CON message
+	         if (ast_test_flag(&p->isupflags, ISUP_ACM_SENT))
+	         {
+	            if(ast_test_flag(&p->isupflags, ISUP_CHARGE))
+	               add_isup_content(p, resp, ISUP_MSG_ANM_CHARGE);
+	            else
+	               add_isup_content(p, resp, ISUP_MSG_ANM_NO_CHARGE);
+	         }
+	      }
+	   }
+	   else if (p->method == SIP_BYE)
+	   {
+	      // only bye sends RLC confirmation
+	      add_isup_content(p, resp, ISUP_MSG_RLC);
+	   }
+
+	   resp->embedded_isup = TRUE;
+	}
+	//--- ISUP End ---
+
 	return 0;
 }
 
@@ -12130,10 +12470,95 @@
 	if(!ast_strlen_zero(p->p_privacy_id))
 	   add_header(req, "Privacy", p->p_privacy_id);
 
+	//--- ISUP ---
+	if (ast_test_flag(&p->isupflags, ISUP_SIP_MSG))
+	{
+	   // only bye sends RLC confirmation
+	   if (sipmethod == SIP_BYE || sipmethod == SIP_CANCEL) // cancel only on outgoing call
+	      add_isup_content(p, req, ISUP_MSG_REL);
+
+	   req->embedded_isup = TRUE;
+	}
+	//--- ISUP End ---
 
 	return 0;
 }
 
+//--- ISUP ----
+static int add_isup_content(struct sip_pvt *p, struct sip_request *resp, int isup_msg)
+{
+   // This should only be sent if BYE had ISUP REL msg
+   if (isup_msg == ISUP_MSG_RLC && ast_test_flag(&p->isupflags, ISUP_GOT_REL) &&
+         !ast_test_flag(&p->isupflags, ISUP_ENDED))
+   {
+      ast_set_flag(&p->isupflags, ISUP_ENDED); // flag maybe not needed
+
+      ast_log(LOG_DEBUG, "Sending ISUP RLC\n");
+      add_header(resp, "Content-Type", isupmime);
+      //add_header_contentLength(resp, sizeof(isupRLC));
+      add_bin_content(resp, isupRLC, sizeof(isupRLC));
+   }
+   else if (isup_msg == ISUP_MSG_REL && !ast_test_flag(&p->isupflags, ISUP_ENDED))
+   {
+      ast_set_flag(&p->isupflags, ISUP_ENDED); // flag maybe not needed
+
+      // Change 0x90 for each call clearing = 0x80 + reason. 0x90 = normal clearing
+      if (p->owner && (ast_channel_hangupcause(p->owner) > 0) && (ast_channel_hangupcause(p->owner) < 128))
+      {
+         //isupREL[5] = 0x80 + p->owner->hangupcause; // hangup_sip2cause
+      }
+      ast_log(LOG_DEBUG, "Sending ISUP REL reason 0x%x\n", isupREL[5]);
+      add_header(resp, "Content-Type", isupmime);
+      //add_header_contentLength(resp, sizeof(isupREL));
+      add_bin_content(resp, isupREL, sizeof(isupREL));
+   }
+   // 180 Ringing
+   else if ((isup_msg == ISUP_MSG_ACM_CHARGE || isup_msg == ISUP_MSG_ACM_NO_CHARGE) && !ast_test_flag(&p->isupflags, ISUP_ACM_SENT))
+   {
+      ast_set_flag(&p->isupflags, ISUP_ACM_SENT); // flag maybe not needed
+
+      // ACM[1] = xx 00 = no indication
+      // ACM[1] = xx 01 = no charge
+      // ACM[1] = xx 10 = charge
+      // ACM[1] = 01 xx "Subscriber free" if 180 Ringing
+      // ACM[1] = 00 xx "no indication" if 183 Session Progress
+
+      ast_log(LOG_DEBUG, "Sending ISUP ACM on Ringing\n");
+      add_header(resp, "Content-Type", isupmime);
+      add_header(resp, "Content-Disposition", "signal;handling=optional");
+      //add_header_contentLength(resp, sizeof(isupACM));
+      if(isup_msg == ISUP_MSG_ACM_CHARGE)
+         add_bin_content(resp, isupACM_charge, sizeof(isupACM_charge));
+      else
+         add_bin_content(resp, isupACM_nocharge, sizeof(isupACM_nocharge));
+   }
+   else if (isup_msg == ISUP_MSG_CPG_CHARGE || isup_msg == ISUP_MSG_CPG_NO_CHARGE)
+   {
+
+      ast_log(LOG_DEBUG, "Sending ISUP CPG on Ringing\n");
+      add_header(resp, "Content-Type", isupmime);
+      //add_header_contentLength(resp, sizeof(isupCPG));
+      if(isup_msg == ISUP_MSG_CPG_CHARGE)
+         add_bin_content(resp, isupCPG_charge, sizeof(isupCPG_charge));
+      else
+         add_bin_content(resp, isupCPG_nocharge, sizeof(isupCPG_nocharge));
+   }
+   else if (isup_msg == ISUP_MSG_ANM_CHARGE || isup_msg == ISUP_MSG_ANM_NO_CHARGE)
+   {
+      ast_log(LOG_DEBUG, "Sending ISUP ANM on 200 OK\n");
+
+      add_header(resp, "Content-Type", isupmime);
+      //add_header_contentLength(resp, sizeof(isupANM));
+      if(isup_msg == ISUP_MSG_ANM_CHARGE)
+         add_bin_content(resp, isupANM_charge, sizeof(isupANM_charge));
+      else
+         add_bin_content(resp, isupANM_nocharge, sizeof(isupANM_nocharge));
+   }
+
+   return 0;
+}
+//--- ISUP End ---
+
 /*! \brief Base transmit response function */
 static int __transmit_response(struct sip_pvt *p, const char *msg, const struct sip_request *req, enum xmittype reliable)
 {
@@ -13262,6 +13687,19 @@
 	char codecbuf[SIPBUFSIZE];
 	char buf[SIPBUFSIZE];
 
+	//--- ISUP ---
+	char boundline[128], endbound[128], emptyline[10];
+	char isupcontent[128], contentdisp[128];
+	char multipartcontent[128];
+	unsigned char *isupdata;
+	char sdpcontent[128];
+	int isupdatalen;
+	int msgType;
+
+	isupdata = isupCON_nocharge;
+	isupdatalen = sizeof(isupCON_nocharge);
+	//--- ISUP End ---
+
 	/* Set the SDP session name */
 	snprintf(subject, sizeof(subject), "s=%s\r\n", ast_strlen_zero(global_sdpsession) ? "-" : global_sdpsession);
 
@@ -13573,9 +14011,132 @@
  	if (needvideo)
  		ast_str_append(&m_video, 0, "\r\n");
  	if (needtext)
- 		ast_str_append(&m_text, 0, "\r\n");
+		ast_str_append(&m_text, 0, "\r\n");
+
+ 	//--- ISUP ---
+ 	// NOTE:
+ 	//    Rules are specified for offers of G.711 -- require u-law networks to
+ 	//    offer both u-law and A-law encoding in the initial offer.
+ 	if (!strncmp(resp->data->str, "SIP/2.0 200 OK", 14))
+ 	   msgType = SIP_MSG_ANSWER;
+ 	else if (!strncmp(resp->data->str, "SIP/2.0 183 Session Progress", 28))
+ 	   msgType = SIP_MSG_EARLY;
+ 	else if (!strncmp(resp->data->str, "SIP/2.0 180 Ringing", 19))
+ 	   msgType = SIP_MSG_RINGING;
+ 	else
+ 	   msgType = SIP_MSG_OTHER;
+
+ 	if ((msgType == SIP_MSG_ANSWER || msgType == SIP_MSG_EARLY || msgType == SIP_MSG_RINGING) && ast_test_flag(&p->isupflags, ISUP_SIP_MSG))
+ 	{
+ 	   if ((msgType == SIP_MSG_EARLY) && !ast_test_flag(&p->isupflags, ISUP_ACM_SENT))
+ 	   {
+ 	      // 183 Session Progress in case of Profile C otherwise not interworked
+ 	      // Backward Call Indicators parameter Called Party's Status Iindicator
+ 	      // 00    "No indication"
+ 	      if(ast_test_flag(&p->isupflags, ISUP_CHARGE))
+ 	      {
+ 	         isupdata = isupACM_charge;
+ 	         isupdatalen = sizeof(isupACM_charge);
+ 	      }
+ 	      else
+ 	      {
+ 	         isupdata = isupACM_nocharge;
+ 	         isupdatalen = sizeof(isupACM_nocharge);
+ 	      }
+
+ 	      ast_set_flag(&p->isupflags, ISUP_ACM_SENT);
+ 	   }
+ 	   else if (msgType == SIP_MSG_RINGING && !ast_test_flag(&p->isupflags, ISUP_ACM_SENT))
+ 	   {
+ 	      // 180 Ringing
+ 	      // Backward Call Indicators parameter Called Party's Status Indicator
+ 	      // 01    "Subscriber free"
+ 	      if(ast_test_flag(&p->isupflags, ISUP_CHARGE))
+ 	      {
+ 	         isupdata = isupACM_charge;
+ 	         isupdatalen = sizeof(isupACM_charge);
+ 	      }
+ 	      else
+ 	      {
+ 	         isupdata = isupACM_nocharge;
+ 	         isupdatalen = sizeof(isupACM_nocharge);
+ 	      }
+
+ 	      ast_set_flag(&p->isupflags, ISUP_ACM_SENT);
+ 	   }
+ 	   // Send ANM if ACM already sent
+ 	   else if (ast_test_flag(&p->isupflags, ISUP_ACM_SENT))
+ 	   {
+ 	      if(ast_test_flag(&p->isupflags, ISUP_CHARGE))
+ 	      {
+ 	         isupdata = isupANM_charge;
+ 	         isupdatalen = sizeof(isupANM_charge);
+ 	      }
+ 	      else
+ 	      {
+ 	         isupdata = isupANM_nocharge;
+ 	         isupdatalen = sizeof(isupANM_nocharge);
+ 	      }
+ 	   }
+ 	   // Send CON if ACM not already sent
+ 	   else if(msgType == SIP_MSG_ANSWER)
+ 	   {
+ 	      if(ast_test_flag(&p->isupflags, ISUP_CHARGE))
+ 	      {
+ 	         isupdata = isupCON_charge;
+ 	         isupdatalen = sizeof(isupCON_charge);
+ 	      }
+ 	      else
+ 	      {
+ 	         isupdata = isupCON_nocharge;
+ 	         isupdatalen = sizeof(isupCON_nocharge);
+ 	      }
+ 	   }
+ 	   else
+ 	   {
+ 	      if(ast_test_flag(&p->isupflags, ISUP_CHARGE))
+ 	      {
+ 	         isupdata = isupCPG_charge;
+ 	         isupdatalen = sizeof(isupCPG_charge);
+ 	      }
+ 	      else
+ 	      {
+ 	         isupdata = isupCPG_nocharge;
+ 	         isupdatalen = sizeof(isupCPG_nocharge);
+ 	      }
+ 	   }
+
+
+ 	   // boundaries
+ 	   snprintf(boundline, sizeof(boundline), "--%s\r\n", multipartboundary);
+ 	   snprintf(endbound, sizeof(endbound), "--%s--\r\n", multipartboundary);
+ 	   snprintf(emptyline, sizeof(emptyline), "\r\n");
+ 	   // aplication/isup
+ 	   //base             protocol                 compatibility
+ 	   //
+ 	   //   itu-t88          ITU-T Q.761-4 (1988)     no
+ 	   //   itu-t92+         ITU-T Q.761-4 (1992)     yes
+
+ 	   snprintf(isupcontent, sizeof(isupcontent), "Content-Type: %s\r\n", isupmime);
+ 	   snprintf(contentdisp, sizeof(contentdisp), "Content-Disposition: %s\r\n\r\n", isupsignal);
+
+ 	   snprintf(sdpcontent, sizeof(sdpcontent), "Content-Type: application/sdp\r\n");
+
+ 	   snprintf(multipartcontent, sizeof(multipartcontent), "multipart/mixed;boundary=%s", multipartboundary);
+ 	   // The message will have the multipart content type
+ 	   add_header(resp, "Content-Type", multipartcontent);
+ 	   // Add the boundary line and then the SDP content. ISUP message will be placed at the end of the SDP
+ 	   add_content(resp, boundline);
+ 	   add_content(resp, sdpcontent);
+ 	   add_content(resp, emptyline);
+ 	}
+ 	else
+ 	{
+ 	   // Before ISUP this line was here alone
+ 	   add_header(resp, "Content-Type", "application/sdp");
+ 	}
+ 	//--- ISUP End ---
 
-	add_header(resp, "Content-Type", "application/sdp");
 	add_content(resp, version);
 	add_content(resp, owner);
 	add_content(resp, subject);
@@ -13670,6 +14231,26 @@
 		}
 	}
 
+	//--- ISUP ---
+	// After inserting the SDP we can insert the ISUP message if applicable
+	if ((msgType == SIP_MSG_EARLY || msgType == SIP_MSG_ANSWER || msgType == SIP_MSG_RINGING) && ast_test_flag(&p->isupflags, ISUP_SIP_MSG))
+	{
+	   add_content(resp, emptyline);
+	   add_content(resp, boundline);
+	   add_content(resp, isupcontent);
+	   if(msgType == SIP_MSG_EARLY)
+	      add_content(resp, contentdisp);
+	   else
+	      add_content(resp, emptyline);
+
+	   add_bin_content(resp, isupdata, isupdatalen);
+	   add_content(resp, emptyline);
+	   add_content(resp, endbound);
+
+	   resp->embedded_isup = TRUE;
+	}
+	//--- ISUP End ---
+
 	/* Update lastrtprx when we send our SDP */
 	p->lastrtprx = p->lastrtptx = time(NULL); /* XXX why both ? */
 
@@ -13804,7 +14385,10 @@
 		if (p->t38.state == T38_ENABLED) {
 			add_sdp(&resp, p, oldsdp, TRUE, TRUE);
 		} else {
-			add_sdp(&resp, p, oldsdp, TRUE, FALSE);
+		   //--- ISUP ---
+		   // If ISUP we should not add SDP again as it is not a good idea
+		   if(!ast_test_flag(&p->isupflags, ISUP_SIP_MSG) || !ast_test_flag(&p->flags[0], SIP_PROGRESS_SENT))
+		      add_sdp(&resp, p, oldsdp, TRUE, FALSE);
 		}
 	} else
 		ast_log(LOG_ERROR, "Can't add SDP to response, since we have no RTP session allocated. Call-ID %s\n", p->callid);
@@ -13878,13 +14462,14 @@
 
 	add_header(&req, "Allow", ALLOWED_METHODS);
 	add_supported(p, &req);
+	/*
 	if (sipdebug) {
 		if (oldsdp == TRUE)
 			add_header(&req, "X-asterisk-Info", "SIP re-invite (Session-Timers)");
 		else
 			add_header(&req, "X-asterisk-Info", "SIP re-invite (External RTP bridge)");
 	}
-
+	 */
 	if (ast_test_flag(&p->flags[0], SIP_SENDRPID))
 		add_rpid(&req, p);
 
@@ -27268,6 +27853,8 @@
 	int res;
 	struct ast_channel *bridged_to;
 	const char *required;
+	//--- ISUP ---
+	const char *content_type;
 
 	/* If we have an INCOMING invite that we haven't answered, terminate that transaction */
 	if (p->pendinginvite && !ast_test_flag(&p->flags[0], SIP_OUTGOING) && !req->ignore) {
@@ -27389,6 +27976,17 @@
 	}
 	ast_clear_flag(&p->flags[1], SIP_PAGE2_DIALOG_ESTABLISHED);
 
+	//--- ISUP ---
+	content_type = sip_get_header(req, "Content-Type");
+
+	/* if the body contains ISUP, this is easy */
+	if (!strncasecmp(content_type, "application/isup", 16))
+	{
+	   ast_log(LOG_DEBUG, "Found ISUP on received BYE message\n");
+	   ast_set_flag(&p->isupflags, ISUP_GOT_REL);
+	}
+	//--- ISUP End ---
+
 	/* Find out what they require */
 	required = sip_get_header(req, "Require");
 	if (!ast_strlen_zero(required)) {
@@ -32616,6 +33214,11 @@
 		   }
 		} else if (!strcasecmp(v->name, "rejectmode")) { // SIP OPTIONS behaviour
 		   ast_copy_string(global_reject_mode, v->value, sizeof(global_reject_mode));
+		}
+		//- ISUP ---
+		else if (!strcasecmp(v->name, "isupmimetype")){
+		   ast_copy_string(isupmime, v->value, sizeof(isupmime));
+		   ast_unescape_semicolon(isupmime);
 		} else if (!strcasecmp(v->name, "videosize")) {
 		   if ((sscanf(v->value, "%d", &global_videosize) != 1) || (global_videosize < 0)) {
 		      ast_log(LOG_WARNING, "'%s' is not a valid videosize at line %d.  Using default.\n", v->value, v->lineno);
diff --exclude='*.xml' --exclude='*.o.d' --exclude=.project --exclude=.cproject -Naur asterisk-11.3.0.p011/channels/sip/include/sip.h asterisk-11.3.0/channels/sip/include/sip.h
--- asterisk-11.3.0.p011/channels/sip/include/sip.h	2013-05-23 11:16:44.212437790 +0100
+++ asterisk-11.3.0/channels/sip/include/sip.h	2013-05-23 13:54:48.958915000 +0100
@@ -304,6 +304,14 @@
 #define SIP_SENDRPID_RPID    (2 << 29) /*!< Use "Remote-Party-ID" for rpid */
 #define SIP_G726_NONSTANDARD (1 << 31) /*!< DP: Use non-standard packing for G726-32 data */
 
+//--- ISUP ---
+/*--- Various flags for the isupflags field in the pvt structure */
+#define ISUP_SIP_MSG   (1 << 0)
+#define ISUP_ACM_SENT  (1 << 1)
+#define ISUP_GOT_REL   (1 << 2)
+#define ISUP_ENDED     (1 << 3)
+#define ISUP_CHARGE    (1 << 4)
+
 /*! \brief Flags to copy from peer/user to dialog */
 #define SIP_FLAGS_TO_COPY \
 	(SIP_PROMISCREDIR | SIP_TRUSTRPID | SIP_SENDRPID | SIP_DTMF | SIP_REINVITE | \
@@ -823,6 +831,8 @@
 	char debug;             /*!< print extra debugging if non zero */
 	char has_to_tag;        /*!< non-zero if packet has To: tag */
 	char ignore;            /*!< if non-zero This is a re-transmit, ignore it */
+	//--- ISUP ---
+	char embedded_isup;
 	char authenticated;     /*!< non-zero if this request was authenticated */
 	ptrdiff_t header[SIP_MAX_HEADERS]; /*!< Array of offsets into the request string of each SIP header*/
 	ptrdiff_t line[SIP_MAX_LINES];     /*!< Array of offsets into the request string of each SDP line*/
@@ -1160,6 +1170,9 @@
 	char url_params[AST_MAX_PARAMS];  /* sip_extended_params support */
 	char ic_extra_data[2048];
 
+	//--- ISUP ---
+	struct ast_flags isupflags;
+
 	// SMRA
 	AST_SMRA_ATTRIB client_smra_attrib;
 	SDPMedia client_sdp_codecs;
